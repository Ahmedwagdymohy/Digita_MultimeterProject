
Interfacting_V0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000019ac  00001a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  008001a8  008001a8  00001b88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c54  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4b  00000000  00000000  00004a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001753  00000000  00000000  000059b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  00007108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076e  00000000  00000000  0000764c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eb9  00000000  00000000  00007dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <ammeter_mode+0x50>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <LCD_CMD+0x1a>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <Ammeter+0x4a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <ADC_READ_SAKKA+0x12>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec ea       	ldi	r30, 0xAC	; 172
     162:	f9 e1       	ldi	r31, 0x19	; 25
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a8 3a       	cpi	r26, 0xA8	; 168
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	a8 ea       	ldi	r26, 0xA8	; 168
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a7 3d       	cpi	r26, 0xD7	; 215
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 19 05 	call	0xa32	; 0xa32 <main>
     184:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <ADC_INIT_SAKKA>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18c:	1a ba       	out	0x1a, r1	; 26
     18e:	87 b1       	in	r24, 0x07	; 7
     190:	80 64       	ori	r24, 0x40	; 64
     192:	87 b9       	out	0x07, r24	; 7
     194:	86 b1       	in	r24, 0x06	; 6
     196:	80 68       	ori	r24, 0x80	; 128
     198:	86 b9       	out	0x06, r24	; 6
     19a:	86 b1       	in	r24, 0x06	; 6
     19c:	80 64       	ori	r24, 0x40	; 64
     19e:	86 b9       	out	0x06, r24	; 6
     1a0:	86 b1       	in	r24, 0x06	; 6
     1a2:	87 60       	ori	r24, 0x07	; 7
     1a4:	86 b9       	out	0x06, r24	; 6
     1a6:	08 95       	ret

000001a8 <ADC_READ_SAKKA>:
     1a8:	97 b1       	in	r25, 0x07	; 7
     1aa:	90 7f       	andi	r25, 0xF0	; 240
     1ac:	97 b9       	out	0x07, r25	; 7
     1ae:	97 b1       	in	r25, 0x07	; 7
     1b0:	89 2b       	or	r24, r25
     1b2:	87 b9       	out	0x07, r24	; 7
     1b4:	86 b1       	in	r24, 0x06	; 6
     1b6:	80 64       	ori	r24, 0x40	; 64
     1b8:	86 b9       	out	0x06, r24	; 6
     1ba:	36 99       	sbic	0x06, 6	; 6
     1bc:	fe cf       	rjmp	.-4      	; 0x1ba <ADC_READ_SAKKA+0x12>
     1be:	84 b1       	in	r24, 0x04	; 4
     1c0:	95 b1       	in	r25, 0x05	; 5
     1c2:	08 95       	ret

000001c4 <LCD_CMD_SAKKA>:
     1c4:	88 bb       	out	0x18, r24	; 24
     1c6:	82 b3       	in	r24, 0x12	; 18
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	82 bb       	out	0x12, r24	; 18
     1cc:	82 b3       	in	r24, 0x12	; 18
     1ce:	8f 7b       	andi	r24, 0xBF	; 191
     1d0:	82 bb       	out	0x12, r24	; 18
     1d2:	82 b3       	in	r24, 0x12	; 18
     1d4:	80 68       	ori	r24, 0x80	; 128
     1d6:	82 bb       	out	0x12, r24	; 18
     1d8:	8f e9       	ldi	r24, 0x9F	; 159
     1da:	9f e0       	ldi	r25, 0x0F	; 15
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_CMD_SAKKA+0x18>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_CMD_SAKKA+0x1e>
     1e2:	00 00       	nop
     1e4:	82 b3       	in	r24, 0x12	; 18
     1e6:	8f 77       	andi	r24, 0x7F	; 127
     1e8:	82 bb       	out	0x12, r24	; 18
     1ea:	08 95       	ret

000001ec <LCD_INIT_SAKKA>:
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	87 bb       	out	0x17, r24	; 23
     1f0:	81 bb       	out	0x11, r24	; 17
     1f2:	88 e3       	ldi	r24, 0x38	; 56
     1f4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_CMD_SAKKA>
     1f8:	8f e9       	ldi	r24, 0x9F	; 159
     1fa:	9f e0       	ldi	r25, 0x0F	; 15
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_INIT_SAKKA+0x10>
     200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_INIT_SAKKA+0x16>
     202:	00 00       	nop
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_CMD_SAKKA>
     20a:	8f e9       	ldi	r24, 0x9F	; 159
     20c:	9f e0       	ldi	r25, 0x0F	; 15
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <LCD_INIT_SAKKA+0x22>
     212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_INIT_SAKKA+0x28>
     214:	00 00       	nop
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_CMD_SAKKA>
     21c:	8f e9       	ldi	r24, 0x9F	; 159
     21e:	9f e0       	ldi	r25, 0x0F	; 15
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <LCD_INIT_SAKKA+0x34>
     224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_INIT_SAKKA+0x3a>
     226:	00 00       	nop
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_CMD_SAKKA>
     22e:	8f e9       	ldi	r24, 0x9F	; 159
     230:	9f e0       	ldi	r25, 0x0F	; 15
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LCD_INIT_SAKKA+0x46>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_INIT_SAKKA+0x4c>
     238:	00 00       	nop
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_CMD_SAKKA>
     240:	8f e9       	ldi	r24, 0x9F	; 159
     242:	9f e0       	ldi	r25, 0x0F	; 15
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <LCD_INIT_SAKKA+0x58>
     248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_INIT_SAKKA+0x5e>
     24a:	00 00       	nop
     24c:	8f e3       	ldi	r24, 0x3F	; 63
     24e:	9c e9       	ldi	r25, 0x9C	; 156
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <LCD_INIT_SAKKA+0x64>
     254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_INIT_SAKKA+0x6a>
     256:	00 00       	nop
     258:	8c e0       	ldi	r24, 0x0C	; 12
     25a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_CMD_SAKKA>
     25e:	8f e3       	ldi	r24, 0x3F	; 63
     260:	9c e9       	ldi	r25, 0x9C	; 156
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCD_INIT_SAKKA+0x76>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_INIT_SAKKA+0x7c>
     268:	00 00       	nop
     26a:	08 95       	ret

0000026c <LCD_WRITE_DATA_SAKKA>:
     26c:	88 bb       	out	0x18, r24	; 24
     26e:	82 b3       	in	r24, 0x12	; 18
     270:	80 62       	ori	r24, 0x20	; 32
     272:	82 bb       	out	0x12, r24	; 18
     274:	82 b3       	in	r24, 0x12	; 18
     276:	8f 7b       	andi	r24, 0xBF	; 191
     278:	82 bb       	out	0x12, r24	; 18
     27a:	82 b3       	in	r24, 0x12	; 18
     27c:	80 68       	ori	r24, 0x80	; 128
     27e:	82 bb       	out	0x12, r24	; 18
     280:	8f e9       	ldi	r24, 0x9F	; 159
     282:	9f e0       	ldi	r25, 0x0F	; 15
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <LCD_WRITE_DATA_SAKKA+0x18>
     288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_WRITE_DATA_SAKKA+0x1e>
     28a:	00 00       	nop
     28c:	82 b3       	in	r24, 0x12	; 18
     28e:	8f 77       	andi	r24, 0x7F	; 127
     290:	82 bb       	out	0x12, r24	; 18
     292:	08 95       	ret

00000294 <LCD_CURSOR_POSITION_SAKKA>:
     294:	88 23       	and	r24, r24
     296:	21 f0       	breq	.+8      	; 0x2a0 <LCD_CURSOR_POSITION_SAKKA+0xc>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	21 f0       	breq	.+8      	; 0x2a4 <LCD_CURSOR_POSITION_SAKKA+0x10>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <LCD_CURSOR_POSITION_SAKKA+0x12>
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <LCD_CURSOR_POSITION_SAKKA+0x12>
     2a4:	80 ec       	ldi	r24, 0xC0	; 192
     2a6:	60 31       	cpi	r22, 0x10	; 16
     2a8:	08 f4       	brcc	.+2      	; 0x2ac <LCD_CURSOR_POSITION_SAKKA+0x18>
     2aa:	86 0f       	add	r24, r22
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 40 03 	call	0x680	; 0x680 <LCD_CMD>
     2b2:	08 95       	ret

000002b4 <LCD_PRINT_STRING_SAKKA>:
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	7c 01       	movw	r14, r24
     2c0:	16 2f       	mov	r17, r22
     2c2:	c0 e0       	ldi	r28, 0x00	; 0
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <LCD_PRINT_STRING_SAKKA+0x2e>
     2c8:	f7 01       	movw	r30, r14
     2ca:	ec 0f       	add	r30, r28
     2cc:	fd 1f       	adc	r31, r29
     2ce:	80 81       	ld	r24, Z
     2d0:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_WRITE_DATA_SAKKA>
     2d4:	8f e9       	ldi	r24, 0x9F	; 159
     2d6:	9f e0       	ldi	r25, 0x0F	; 15
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_PRINT_STRING_SAKKA+0x24>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_PRINT_STRING_SAKKA+0x2a>
     2de:	00 00       	nop
     2e0:	21 96       	adiw	r28, 0x01	; 1
     2e2:	81 2f       	mov	r24, r17
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	c8 17       	cp	r28, r24
     2e8:	d9 07       	cpc	r29, r25
     2ea:	74 f3       	brlt	.-36     	; 0x2c8 <LCD_PRINT_STRING_SAKKA+0x14>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	08 95       	ret

000002f8 <LCD_display_float>:
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	64 97       	sbiw	r28, 0x14	; 20
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	24 2f       	mov	r18, r20
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	8e 01       	movw	r16, r28
     316:	0f 5f       	subi	r16, 0xFF	; 255
     318:	1f 4f       	sbci	r17, 0xFF	; 255
     31a:	45 e0       	ldi	r20, 0x05	; 5
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <dtostrf>
     322:	66 e0       	ldi	r22, 0x06	; 6
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	c8 01       	movw	r24, r16
     328:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_PRINT_STRING_SAKKA>
     32c:	64 96       	adiw	r28, 0x14	; 20
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <Ammeter_Init>:
}

////////// AMMETER

void Ammeter_Init(uint8_t mode)
{
     342:	cf 93       	push	r28
     344:	c8 2f       	mov	r28, r24
	LCD_INIT_SAKKA();
     346:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_INIT_SAKKA>
	ADC_INIT_SAKKA();
     34a:	0e 94 c6 00 	call	0x18c	; 0x18c <ADC_INIT_SAKKA>
	
	LCD_CURSOR_POSITION_SAKKA(0,0);
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_CURSOR_POSITION_SAKKA>
	LCD_PRINT_STRING_SAKKA("Current value : ",16);
     356:	60 e1       	ldi	r22, 0x10	; 16
     358:	86 e7       	ldi	r24, 0x76	; 118
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_PRINT_STRING_SAKKA>
	
	//LCD_CURSOR_POSITION_SAKKA(1,13);
	//LCD_PRINT_STRING_SAKKA("9->",3);
	
	DDRA = 0xFF;
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
     364:	8b bb       	out	0x1b, r24	; 27
	DDRA &= ~(1 << DDA0); // To make PA0 input
     366:	8a b3       	in	r24, 0x1a	; 26
     368:	8e 7f       	andi	r24, 0xFE	; 254
     36a:	8a bb       	out	0x1a, r24	; 26
	/*
		if mode == 1	--> DC
		if mode == 2	--> AC
	*/
	
	if(mode == 1)
     36c:	c1 30       	cpi	r28, 0x01	; 1
     36e:	21 f4       	brne	.+8      	; 0x378 <Ammeter_Init+0x36>
	{
		pinWriteLow(PORTA5);
     370:	8b b3       	in	r24, 0x1b	; 27
     372:	8f 7d       	andi	r24, 0xDF	; 223
     374:	8b bb       	out	0x1b, r24	; 27
     376:	03 c0       	rjmp	.+6      	; 0x37e <Ammeter_Init+0x3c>
	}
	else
	{
		pinWriteHIGH(PORTA5);
     378:	8b b3       	in	r24, 0x1b	; 27
     37a:	80 62       	ori	r24, 0x20	; 32
     37c:	8b bb       	out	0x1b, r24	; 27
	}
}
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <Ammeter>:

void Ammeter(uint8_t range, uint8_t mode)
{
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	cf 93       	push	r28
     38c:	c8 2f       	mov	r28, r24
     38e:	86 2f       	mov	r24, r22
	
	double value;
	double factor;
	uint8_t keypadValue;
	
	Ammeter_Init(mode);
     390:	0e 94 a1 01 	call	0x342	; 0x342 <Ammeter_Init>
	
	if(range == 1)
     394:	c1 30       	cpi	r28, 0x01	; 1
     396:	89 f4       	brne	.+34     	; 0x3ba <Ammeter+0x38>
		
		//factor = 207067.92;
		factor = 0.005 / 1024.0;
		
		// TODO : switch Relays.
		pinWriteLow(PORTA3);
     398:	8b b3       	in	r24, 0x1b	; 27
     39a:	87 7f       	andi	r24, 0xF7	; 247
     39c:	8b bb       	out	0x1b, r24	; 27
		pinWriteLow(PORTA4);
     39e:	8b b3       	in	r24, 0x1b	; 27
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	8b bb       	out	0x1b, r24	; 27
	{
		// range of 1K Ohm
		// 0 --> 5 (mA)
		
		//factor = 207067.92;
		factor = 0.005 / 1024.0;
     3a4:	0f 2e       	mov	r0, r31
     3a6:	fa e0       	ldi	r31, 0x0A	; 10
     3a8:	cf 2e       	mov	r12, r31
     3aa:	f7 ed       	ldi	r31, 0xD7	; 215
     3ac:	df 2e       	mov	r13, r31
     3ae:	f3 ea       	ldi	r31, 0xA3	; 163
     3b0:	ef 2e       	mov	r14, r31
     3b2:	f6 e3       	ldi	r31, 0x36	; 54
     3b4:	ff 2e       	mov	r15, r31
     3b6:	f0 2d       	mov	r31, r0
     3b8:	23 c0       	rjmp	.+70     	; 0x400 <__EEPROM_REGION_LENGTH__>
		// TODO : switch Relays.
		pinWriteLow(PORTA3);
		pinWriteLow(PORTA4);

	}
	else if(range == 2)
     3ba:	c2 30       	cpi	r28, 0x02	; 2
     3bc:	89 f4       	brne	.+34     	; 0x3e0 <Ammeter+0x5e>
		
		//factor = 20740.66918;
		factor = 0.05 / 1024.0;
		
		// TODO : switch Relays.
		pinWriteHIGH(PORTA3);
     3be:	8b b3       	in	r24, 0x1b	; 27
     3c0:	88 60       	ori	r24, 0x08	; 8
     3c2:	8b bb       	out	0x1b, r24	; 27
		pinWriteLow(PORTA4);
     3c4:	8b b3       	in	r24, 0x1b	; 27
     3c6:	8f 7e       	andi	r24, 0xEF	; 239
     3c8:	8b bb       	out	0x1b, r24	; 27
	{
		// range of 100 Ohm
		// 0 --> 50 (mA)
		
		//factor = 20740.66918;
		factor = 0.05 / 1024.0;
     3ca:	0f 2e       	mov	r0, r31
     3cc:	fd ec       	ldi	r31, 0xCD	; 205
     3ce:	cf 2e       	mov	r12, r31
     3d0:	fc ec       	ldi	r31, 0xCC	; 204
     3d2:	df 2e       	mov	r13, r31
     3d4:	fc e4       	ldi	r31, 0x4C	; 76
     3d6:	ef 2e       	mov	r14, r31
     3d8:	f8 e3       	ldi	r31, 0x38	; 56
     3da:	ff 2e       	mov	r15, r31
     3dc:	f0 2d       	mov	r31, r0
     3de:	10 c0       	rjmp	.+32     	; 0x400 <__EEPROM_REGION_LENGTH__>
		// TODO : switch Relays.
		pinWriteHIGH(PORTA3);
		pinWriteLow(PORTA4);
		
	}
	else if(range == 3)
     3e0:	c3 30       	cpi	r28, 0x03	; 3
     3e2:	71 f4       	brne	.+28     	; 0x400 <__EEPROM_REGION_LENGTH__>
		//factor = 248.947;
		factor = 4.0 / 1024.0;
		//factor = 1;
		
		// TODO : switch Relays.
		pinWriteHIGH(PORTA3);
     3e4:	8b b3       	in	r24, 0x1b	; 27
     3e6:	88 60       	ori	r24, 0x08	; 8
     3e8:	8b bb       	out	0x1b, r24	; 27
		pinWriteHIGH(PORTA4);
     3ea:	8b b3       	in	r24, 0x1b	; 27
     3ec:	80 61       	ori	r24, 0x10	; 16
     3ee:	8b bb       	out	0x1b, r24	; 27
	{
		// range of 1 Ohm
		// 0 --> 4 (A)
		
		//factor = 248.947;
		factor = 4.0 / 1024.0;
     3f0:	0f 2e       	mov	r0, r31
     3f2:	c1 2c       	mov	r12, r1
     3f4:	d1 2c       	mov	r13, r1
     3f6:	f0 e8       	ldi	r31, 0x80	; 128
     3f8:	ef 2e       	mov	r14, r31
     3fa:	fb e3       	ldi	r31, 0x3B	; 59
     3fc:	ff 2e       	mov	r15, r31
     3fe:	f0 2d       	mov	r31, r0
		pinWriteHIGH(PORTA4);
	}
	
	while(1)
	{
		LCD_CURSOR_POSITION_SAKKA(1,0);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_CURSOR_POSITION_SAKKA>
		value = ADC_READ_SAKKA(0) * factor;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_READ_SAKKA>
     40e:	bc 01       	movw	r22, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__floatunsisf>
     418:	9b 01       	movw	r18, r22
     41a:	ac 01       	movw	r20, r24
     41c:	c7 01       	movw	r24, r14
     41e:	b6 01       	movw	r22, r12
     420:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
		LCD_display_float(value,6);
     424:	46 e0       	ldi	r20, 0x06	; 6
     426:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_display_float>
		//LCD_PRINT_FLOAT_SAKKA(value,6);
		
		char key = keyfind();
     42a:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
		 
		 if(key == '9')
     42e:	89 33       	cpi	r24, 0x39	; 57
     430:	39 f7       	brne	.-50     	; 0x400 <__EEPROM_REGION_LENGTH__>
		 {
		 	break;
		 }
		
	}
}
     432:	cf 91       	pop	r28
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	cf 90       	pop	r12
     43c:	08 95       	ret

0000043e <Volt_relay>:
 */ 
#include "Volt.h"



void Volt_relay(uint8_t mode, uint8_t range,uint8_t volt_ch){
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	18 2f       	mov	r17, r24
     448:	c6 2f       	mov	r28, r22
     44a:	d4 2f       	mov	r29, r20
	ADC_init(volt_ch);
     44c:	84 2f       	mov	r24, r20
     44e:	0e 94 43 05 	call	0xa86	; 0xa86 <ADC_init>
	//LCD_INIT();
	//LCD_CURSOR_POSITION(0,0);
	
	bitset(SELECTOR_DIR,RELAY_VSEL);
     452:	81 b3       	in	r24, 0x11	; 17
     454:	80 61       	ori	r24, 0x10	; 16
     456:	81 bb       	out	0x11, r24	; 17
	bitset(SELECTOR_DIR,MUX_VOL_SELH);
     458:	81 b3       	in	r24, 0x11	; 17
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	81 bb       	out	0x11, r24	; 17
	bitset(SELECTOR_DIR,RELAY_VRANGE);
     45e:	81 b3       	in	r24, 0x11	; 17
     460:	81 60       	ori	r24, 0x01	; 1
     462:	81 bb       	out	0x11, r24	; 17
	bitset(SELECTOR_DIR,MUX_VOL_SELL);
     464:	81 b3       	in	r24, 0x11	; 17
     466:	84 60       	ori	r24, 0x04	; 4
     468:	81 bb       	out	0x11, r24	; 17
	bitset(SELECTOR_DIR,RELAY_MUX_SEL);
     46a:	81 b3       	in	r24, 0x11	; 17
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	81 bb       	out	0x11, r24	; 17

	if (mode == 1){
     470:	11 30       	cpi	r17, 0x01	; 1
     472:	39 f4       	brne	.+14     	; 0x482 <Volt_relay+0x44>
		bitset(SELECTOR_DIR,RELAY_VSEL);
     474:	81 b3       	in	r24, 0x11	; 17
     476:	80 61       	ori	r24, 0x10	; 16
     478:	81 bb       	out	0x11, r24	; 17
		bitclear(SELECTOR_DATA,RELAY_VSEL);
     47a:	82 b3       	in	r24, 0x12	; 18
     47c:	8f 7e       	andi	r24, 0xEF	; 239
     47e:	82 bb       	out	0x12, r24	; 18
     480:	08 c0       	rjmp	.+16     	; 0x492 <Volt_relay+0x54>
		//LCD_PRINT_STRING("Voltmeter DC",12);
	}
	else if (mode == 0)
     482:	11 11       	cpse	r17, r1
     484:	06 c0       	rjmp	.+12     	; 0x492 <Volt_relay+0x54>
	{
		bitset(SELECTOR_DIR,RELAY_VSEL);
     486:	81 b3       	in	r24, 0x11	; 17
     488:	80 61       	ori	r24, 0x10	; 16
     48a:	81 bb       	out	0x11, r24	; 17
		bitset(SELECTOR_DATA,RELAY_VSEL);
     48c:	82 b3       	in	r24, 0x12	; 18
     48e:	80 61       	ori	r24, 0x10	; 16
     490:	82 bb       	out	0x12, r24	; 18
		//LCD_PRINT_STRING("Voltmeter AC",12);
	}
	switch (range)
     492:	c1 30       	cpi	r28, 0x01	; 1
     494:	81 f0       	breq	.+32     	; 0x4b6 <Volt_relay+0x78>
     496:	28 f0       	brcs	.+10     	; 0x4a2 <Volt_relay+0x64>
     498:	c2 30       	cpi	r28, 0x02	; 2
     49a:	b9 f0       	breq	.+46     	; 0x4ca <Volt_relay+0x8c>
     49c:	c3 30       	cpi	r28, 0x03	; 3
     49e:	f9 f0       	breq	.+62     	; 0x4de <Volt_relay+0xa0>
     4a0:	2a c0       	rjmp	.+84     	; 0x4f6 <Volt_relay+0xb8>
	{
		case 0:
		bitclear(SELECTOR_DATA,MUX_VOL_SELL);
     4a2:	82 b3       	in	r24, 0x12	; 18
     4a4:	8b 7f       	andi	r24, 0xFB	; 251
     4a6:	82 bb       	out	0x12, r24	; 18
		bitclear(SELECTOR_DATA,MUX_VOL_SELH);
     4a8:	82 b3       	in	r24, 0x12	; 18
     4aa:	8d 7f       	andi	r24, 0xFD	; 253
     4ac:	82 bb       	out	0x12, r24	; 18
		bitset(SELECTOR_DATA,RELAY_MUX_SEL);
     4ae:	82 b3       	in	r24, 0x12	; 18
     4b0:	88 60       	ori	r24, 0x08	; 8
     4b2:	82 bb       	out	0x12, r24	; 18
		break;
     4b4:	20 c0       	rjmp	.+64     	; 0x4f6 <Volt_relay+0xb8>
		case 1:
		bitset(SELECTOR_DATA,RELAY_MUX_SEL);
     4b6:	82 b3       	in	r24, 0x12	; 18
     4b8:	88 60       	ori	r24, 0x08	; 8
     4ba:	82 bb       	out	0x12, r24	; 18
		bitset(SELECTOR_DATA,MUX_VOL_SELL);
     4bc:	82 b3       	in	r24, 0x12	; 18
     4be:	84 60       	ori	r24, 0x04	; 4
     4c0:	82 bb       	out	0x12, r24	; 18
		bitclear(SELECTOR_DATA,MUX_VOL_SELH);
     4c2:	82 b3       	in	r24, 0x12	; 18
     4c4:	8d 7f       	andi	r24, 0xFD	; 253
     4c6:	82 bb       	out	0x12, r24	; 18
		break;
     4c8:	16 c0       	rjmp	.+44     	; 0x4f6 <Volt_relay+0xb8>
		case 2:
		bitset(SELECTOR_DATA,RELAY_MUX_SEL);
     4ca:	82 b3       	in	r24, 0x12	; 18
     4cc:	88 60       	ori	r24, 0x08	; 8
     4ce:	82 bb       	out	0x12, r24	; 18
		bitclear(SELECTOR_DATA,MUX_VOL_SELL);
     4d0:	82 b3       	in	r24, 0x12	; 18
     4d2:	8b 7f       	andi	r24, 0xFB	; 251
     4d4:	82 bb       	out	0x12, r24	; 18
		bitset(SELECTOR_DATA,MUX_VOL_SELH);
     4d6:	82 b3       	in	r24, 0x12	; 18
     4d8:	82 60       	ori	r24, 0x02	; 2
     4da:	82 bb       	out	0x12, r24	; 18
		break;
     4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <Volt_relay+0xb8>
		case 3:
		bitclear(SELECTOR_DIR,MUX_VOL_SELH);
     4de:	81 b3       	in	r24, 0x11	; 17
     4e0:	8d 7f       	andi	r24, 0xFD	; 253
     4e2:	81 bb       	out	0x11, r24	; 17
		bitclear(SELECTOR_DIR,MUX_VOL_SELL);
     4e4:	81 b3       	in	r24, 0x11	; 17
     4e6:	8b 7f       	andi	r24, 0xFB	; 251
     4e8:	81 bb       	out	0x11, r24	; 17
		bitclear(SELECTOR_DATA,RELAY_MUX_SEL);
     4ea:	82 b3       	in	r24, 0x12	; 18
     4ec:	87 7f       	andi	r24, 0xF7	; 247
     4ee:	82 bb       	out	0x12, r24	; 18
		bitclear(SELECTOR_DATA,RELAY_VRANGE);
     4f0:	82 b3       	in	r24, 0x12	; 18
     4f2:	8e 7f       	andi	r24, 0xFE	; 254
     4f4:	82 bb       	out	0x12, r24	; 18
		break;
	}
	int *value;
	ADC_read(volt_ch,value);
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
     4fa:	b8 01       	movw	r22, r16
     4fc:	8d 2f       	mov	r24, r29
     4fe:	0e 94 5e 05 	call	0xabc	; 0xabc <ADC_read>
	float A_value = ((float) *value)* (5.0/1024.0);
     502:	f8 01       	movw	r30, r16
     504:	60 81       	ld	r22, Z
     506:	71 81       	ldd	r23, Z+1	; 0x01
     508:	07 2e       	mov	r0, r23
     50a:	00 0c       	add	r0, r0
     50c:	88 0b       	sbc	r24, r24
     50e:	99 0b       	sbc	r25, r25
     510:	0e 94 6d 08 	call	0x10da	; 0x10da <__floatsisf>
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 ea       	ldi	r20, 0xA0	; 160
     51a:	5b e3       	ldi	r21, 0x3B	; 59
     51c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
	switch(range){
     520:	c2 30       	cpi	r28, 0x02	; 2
     522:	59 f0       	breq	.+22     	; 0x53a <Volt_relay+0xfc>
     524:	c3 30       	cpi	r28, 0x03	; 3
     526:	81 f0       	breq	.+32     	; 0x548 <Volt_relay+0x10a>
     528:	c1 30       	cpi	r28, 0x01	; 1
     52a:	a1 f4       	brne	.+40     	; 0x554 <Volt_relay+0x116>
		case 0:
		A_value = A_value * 1;
		break;
		case 1:
		A_value = A_value * (20/4.5);
     52c:	24 ee       	ldi	r18, 0xE4	; 228
     52e:	38 e3       	ldi	r19, 0x38	; 56
     530:	4e e8       	ldi	r20, 0x8E	; 142
     532:	50 e4       	ldi	r21, 0x40	; 64
     534:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
		break;
     538:	0d c0       	rjmp	.+26     	; 0x554 <Volt_relay+0x116>
		case 2:
		A_value = A_value * (200/4.5);
     53a:	2c e1       	ldi	r18, 0x1C	; 28
     53c:	37 ec       	ldi	r19, 0xC7	; 199
     53e:	41 e3       	ldi	r20, 0x31	; 49
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
		break;
     546:	06 c0       	rjmp	.+12     	; 0x554 <Volt_relay+0x116>
		case 3:
		A_value = A_value * (2000/4.5);
     548:	24 ee       	ldi	r18, 0xE4	; 228
     54a:	38 e3       	ldi	r19, 0x38	; 56
     54c:	4e ed       	ldi	r20, 0xDE	; 222
     54e:	53 e4       	ldi	r21, 0x43	; 67
     550:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
		break;
	}
	LCD_print_float(A_value,1,0);
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_print_float>
	
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <keyfind>:
 */
char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           	/* set port direction as input-output */
     566:	80 ef       	ldi	r24, 0xF0	; 240
     568:	84 bb       	out	0x14, r24	; 20
		KEY_PRT = 0xFF;
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	85 bb       	out	0x15, r24	; 21

		do
		{
			KEY_PRT &= 0x0F;      		/* mask PORT for column read only */
     56e:	85 b3       	in	r24, 0x15	; 21
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
     574:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); 	/* read status of column */
     576:	83 b3       	in	r24, 0x13	; 19
     578:	8f 70       	andi	r24, 0x0F	; 15
     57a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
		}while(colloc != 0x0F);
     57e:	8f 30       	cpi	r24, 0x0F	; 15
     580:	b1 f7       	brne	.-20     	; 0x56e <keyfind+0x8>
     582:	87 e8       	ldi	r24, 0x87	; 135
     584:	93 e1       	ldi	r25, 0x13	; 19
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <keyfind+0x20>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <keyfind+0x26>
     58c:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
     58e:	83 b3       	in	r24, 0x13	; 19
     590:	8f 70       	andi	r24, 0x0F	; 15
     592:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
				}while(colloc == 0x0F);        /* check for any key press */
     596:	8f 30       	cpi	r24, 0x0F	; 15
     598:	a1 f3       	breq	.-24     	; 0x582 <keyfind+0x1c>
     59a:	8f e0       	ldi	r24, 0x0F	; 15
     59c:	97 e2       	ldi	r25, 0x27	; 39
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <keyfind+0x38>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <keyfind+0x3e>
     5a4:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
     5a6:	83 b3       	in	r24, 0x13	; 19
     5a8:	8f 70       	andi	r24, 0x0F	; 15
     5aa:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
			}while(colloc == 0x0F);
     5ae:	8f 30       	cpi	r24, 0x0F	; 15
     5b0:	41 f3       	breq	.-48     	; 0x582 <keyfind+0x1c>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
     5b2:	8f ee       	ldi	r24, 0xEF	; 239
     5b4:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
     5b6:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     5b8:	83 b3       	in	r24, 0x13	; 19
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
			if(colloc != 0x0F)
     5c0:	8f 30       	cpi	r24, 0x0F	; 15
     5c2:	19 f0       	breq	.+6      	; 0x5ca <keyfind+0x64>
			{
				rowloc = 0;
     5c4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <rowloc>
				break;
     5c8:	27 c0       	rjmp	.+78     	; 0x618 <keyfind+0xb2>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
     5ca:	8f ed       	ldi	r24, 0xDF	; 223
     5cc:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
     5ce:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     5d0:	83 b3       	in	r24, 0x13	; 19
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
			if(colloc != 0x0F)
     5d8:	8f 30       	cpi	r24, 0x0F	; 15
     5da:	21 f0       	breq	.+8      	; 0x5e4 <keyfind+0x7e>
			{
				rowloc = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <rowloc>
				break;
     5e2:	1a c0       	rjmp	.+52     	; 0x618 <keyfind+0xb2>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
     5e4:	8f eb       	ldi	r24, 0xBF	; 191
     5e6:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
     5e8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     5ea:	83 b3       	in	r24, 0x13	; 19
     5ec:	8f 70       	andi	r24, 0x0F	; 15
     5ee:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
			if(colloc != 0x0F)
     5f2:	8f 30       	cpi	r24, 0x0F	; 15
     5f4:	21 f0       	breq	.+8      	; 0x5fe <keyfind+0x98>
			{
				rowloc = 2;
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <rowloc>
				break;
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <keyfind+0xb2>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
     5fe:	8f e7       	ldi	r24, 0x7F	; 127
     600:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
     602:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     604:	83 b3       	in	r24, 0x13	; 19
     606:	8f 70       	andi	r24, 0x0F	; 15
     608:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
			if(colloc != 0x0F)
     60c:	8f 30       	cpi	r24, 0x0F	; 15
     60e:	09 f4       	brne	.+2      	; 0x612 <keyfind+0xac>
     610:	aa cf       	rjmp	.-172    	; 0x566 <keyfind>
			{
				rowloc = 3;
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
     618:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
     61c:	8e 30       	cpi	r24, 0x0E	; 14
     61e:	59 f4       	brne	.+22     	; 0x636 <keyfind+0xd0>
		return(keypad[rowloc][0]);
     620:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <rowloc>
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	e0 5a       	subi	r30, 0xA0	; 160
     630:	ff 4f       	sbci	r31, 0xFF	; 255
     632:	80 81       	ld	r24, Z
     634:	08 95       	ret
		else if(colloc == 0x0D)
     636:	8d 30       	cpi	r24, 0x0D	; 13
     638:	59 f4       	brne	.+22     	; 0x650 <keyfind+0xea>
		return(keypad[rowloc][1]);
     63a:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <rowloc>
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	e0 5a       	subi	r30, 0xA0	; 160
     64a:	ff 4f       	sbci	r31, 0xFF	; 255
     64c:	81 81       	ldd	r24, Z+1	; 0x01
     64e:	08 95       	ret
		else if(colloc == 0x0B)
     650:	8b 30       	cpi	r24, 0x0B	; 11
     652:	59 f4       	brne	.+22     	; 0x66a <keyfind+0x104>
		return(keypad[rowloc][2]);
     654:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <rowloc>
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e0 5a       	subi	r30, 0xA0	; 160
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	08 95       	ret
		else
		return(keypad[rowloc][3]);
     66a:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <rowloc>
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e0 5a       	subi	r30, 0xA0	; 160
     67a:	ff 4f       	sbci	r31, 0xFF	; 255
     67c:	83 81       	ldd	r24, Z+3	; 0x03
     67e:	08 95       	ret

00000680 <LCD_CMD>:
     680:	88 bb       	out	0x18, r24	; 24
     682:	82 b3       	in	r24, 0x12	; 18
     684:	8f 7d       	andi	r24, 0xDF	; 223
     686:	82 bb       	out	0x12, r24	; 18
     688:	82 b3       	in	r24, 0x12	; 18
     68a:	8f 7b       	andi	r24, 0xBF	; 191
     68c:	82 bb       	out	0x12, r24	; 18
     68e:	82 b3       	in	r24, 0x12	; 18
     690:	80 68       	ori	r24, 0x80	; 128
     692:	82 bb       	out	0x12, r24	; 18
     694:	89 ef       	ldi	r24, 0xF9	; 249
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_CMD+0x18>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_CMD+0x1e>
     69e:	00 00       	nop
     6a0:	82 b3       	in	r24, 0x12	; 18
     6a2:	8f 77       	andi	r24, 0x7F	; 127
     6a4:	82 bb       	out	0x12, r24	; 18
     6a6:	08 95       	ret

000006a8 <LCD_WRITE_DATA>:
     6a8:	88 bb       	out	0x18, r24	; 24
     6aa:	82 b3       	in	r24, 0x12	; 18
     6ac:	80 62       	ori	r24, 0x20	; 32
     6ae:	82 bb       	out	0x12, r24	; 18
     6b0:	82 b3       	in	r24, 0x12	; 18
     6b2:	8f 7b       	andi	r24, 0xBF	; 191
     6b4:	82 bb       	out	0x12, r24	; 18
     6b6:	82 b3       	in	r24, 0x12	; 18
     6b8:	80 68       	ori	r24, 0x80	; 128
     6ba:	82 bb       	out	0x12, r24	; 18
     6bc:	89 ef       	ldi	r24, 0xF9	; 249
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCD_WRITE_DATA+0x18>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <LCD_WRITE_DATA+0x1e>
     6c6:	00 00       	nop
     6c8:	82 b3       	in	r24, 0x12	; 18
     6ca:	8f 77       	andi	r24, 0x7F	; 127
     6cc:	82 bb       	out	0x12, r24	; 18
     6ce:	08 95       	ret

000006d0 <LCD_CURSOR_POSITION>:
     6d0:	88 23       	and	r24, r24
     6d2:	21 f0       	breq	.+8      	; 0x6dc <LCD_CURSOR_POSITION+0xc>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	21 f0       	breq	.+8      	; 0x6e0 <LCD_CURSOR_POSITION+0x10>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <LCD_CURSOR_POSITION+0x12>
     6dc:	80 e8       	ldi	r24, 0x80	; 128
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <LCD_CURSOR_POSITION+0x12>
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
     6e2:	60 31       	cpi	r22, 0x10	; 16
     6e4:	08 f4       	brcc	.+2      	; 0x6e8 <LCD_CURSOR_POSITION+0x18>
     6e6:	86 0f       	add	r24, r22
     6e8:	0e 94 40 03 	call	0x680	; 0x680 <LCD_CMD>
     6ec:	08 95       	ret

000006ee <LCD_PRINT_INT>:
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	2a 97       	sbiw	r28, 0x0a	; 10
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	dc 01       	movw	r26, r24
     70c:	9e 01       	movw	r18, r28
     70e:	2f 5f       	subi	r18, 0xFF	; 255
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	8a e0       	ldi	r24, 0x0A	; 10
     714:	f9 01       	movw	r30, r18
     716:	11 92       	st	Z+, r1
     718:	8a 95       	dec	r24
     71a:	e9 f7       	brne	.-6      	; 0x716 <LCD_PRINT_INT+0x28>
     71c:	80 e2       	ldi	r24, 0x20	; 32
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	0a c0       	rjmp	.+20     	; 0x73a <LCD_PRINT_INT+0x4c>
     726:	e1 e0       	ldi	r30, 0x01	; 1
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	ec 0f       	add	r30, r28
     72c:	fd 1f       	adc	r31, r29
     72e:	e2 0f       	add	r30, r18
     730:	f3 1f       	adc	r31, r19
     732:	90 e2       	ldi	r25, 0x20	; 32
     734:	90 83       	st	Z, r25
     736:	2f 5f       	subi	r18, 0xFF	; 255
     738:	3f 4f       	sbci	r19, 0xFF	; 255
     73a:	e6 2e       	mov	r14, r22
     73c:	f1 2c       	mov	r15, r1
     73e:	2e 15       	cp	r18, r14
     740:	3f 05       	cpc	r19, r15
     742:	8c f3       	brlt	.-30     	; 0x726 <LCD_PRINT_INT+0x38>
     744:	4a e0       	ldi	r20, 0x0A	; 10
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <itoa>
     754:	00 e0       	ldi	r16, 0x00	; 0
     756:	10 e0       	ldi	r17, 0x00	; 0
     758:	13 c0       	rjmp	.+38     	; 0x780 <LCD_PRINT_INT+0x92>
     75a:	e1 e0       	ldi	r30, 0x01	; 1
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	ec 0f       	add	r30, r28
     760:	fd 1f       	adc	r31, r29
     762:	e0 0f       	add	r30, r16
     764:	f1 1f       	adc	r31, r17
     766:	80 81       	ld	r24, Z
     768:	90 ed       	ldi	r25, 0xD0	; 208
     76a:	98 0f       	add	r25, r24
     76c:	9a 30       	cpi	r25, 0x0A	; 10
     76e:	20 f0       	brcs	.+8      	; 0x778 <LCD_PRINT_INT+0x8a>
     770:	80 e2       	ldi	r24, 0x20	; 32
     772:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_WRITE_DATA>
     776:	02 c0       	rjmp	.+4      	; 0x77c <LCD_PRINT_INT+0x8e>
     778:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_WRITE_DATA>
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	0e 15       	cp	r16, r14
     782:	1f 05       	cpc	r17, r15
     784:	54 f3       	brlt	.-44     	; 0x75a <LCD_PRINT_INT+0x6c>
     786:	2a 96       	adiw	r28, 0x0a	; 10
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <LCD_print_float>:
	delay_low;
	LCD_CMD(0x80); // Go to first line and 0th position
	delay_low;
}

void LCD_print_float(float num,uint8_t row,uint8_t column){
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	4b 01       	movw	r8, r22
     7b8:	5c 01       	movw	r10, r24
     7ba:	d4 2f       	mov	r29, r20
     7bc:	12 2f       	mov	r17, r18
	int c =  get_digit_count((int) num);
     7be:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     7c2:	6b 01       	movw	r12, r22
     7c4:	7c 01       	movw	r14, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	0e 94 42 07 	call	0xe84	; 0xe84 <get_digit_count>
     7cc:	c8 2f       	mov	r28, r24
	LCD_CURSOR_POSITION(row,column);
     7ce:	61 2f       	mov	r22, r17
     7d0:	8d 2f       	mov	r24, r29
     7d2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_CURSOR_POSITION>
	LCD_PRINT_INT((int) num,c);
     7d6:	6c 2f       	mov	r22, r28
     7d8:	c6 01       	movw	r24, r12
     7da:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_PRINT_INT>
	LCD_CURSOR_POSITION(row,column+c);
     7de:	c1 0f       	add	r28, r17
     7e0:	6c 2f       	mov	r22, r28
     7e2:	8d 2f       	mov	r24, r29
     7e4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_CURSOR_POSITION>
	LCD_WRITE_DATA('.');
     7e8:	8e e2       	ldi	r24, 0x2E	; 46
     7ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_WRITE_DATA>
	LCD_CURSOR_POSITION(row,column+c+1);
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	6c 0f       	add	r22, r28
     7f2:	8d 2f       	mov	r24, r29
     7f4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <LCD_CURSOR_POSITION>
	float dec = (num - (int)num)*100 ;
     7f8:	b6 01       	movw	r22, r12
     7fa:	dd 0c       	add	r13, r13
     7fc:	88 0b       	sbc	r24, r24
     7fe:	99 0b       	sbc	r25, r25
     800:	0e 94 6d 08 	call	0x10da	; 0x10da <__floatsisf>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	c5 01       	movw	r24, r10
     80a:	b4 01       	movw	r22, r8
     80c:	0e 94 56 07 	call	0xeac	; 0xeac <__subsf3>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	48 ec       	ldi	r20, 0xC8	; 200
     816:	52 e4       	ldi	r21, 0x42	; 66
     818:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
	LCD_PRINT_INT(round(dec),2);
     81c:	0e 94 66 09 	call	0x12cc	; 0x12cc <round>
     820:	0e 94 3c 08 	call	0x1078	; 0x1078 <__fixunssfsi>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	62 e0       	ldi	r22, 0x02	; 2
     82a:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_PRINT_INT>
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	af 90       	pop	r10
     840:	9f 90       	pop	r9
     842:	8f 90       	pop	r8
     844:	08 95       	ret

00000846 <get_user_choice>:
// Function to get user choice
char get_user_choice() {
	
    char choice;

    LCD_Stringg("1.Ohm");
     846:	87 e8       	ldi	r24, 0x87	; 135
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
    LCD_Stringg("  2.Volt");
     84e:	8d e8       	ldi	r24, 0x8D	; 141
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_CURSOR_POSITIONN(1,0);
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_CURSOR_POSITIONN>
    LCD_Stringg("  3.Ammeter");
     862:	86 e9       	ldi	r24, 0x96	; 150
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
    //printf("4. Exit program\n");
    /* ana canceled the exit choice to keep the main list on the screen , no exiting from it , it's a DMM :))*/
    choice = keyfind();
     86a:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
    return choice;
}
     86e:	08 95       	ret

00000870 <ohmmeter_mode>:




// Function to handle Ohmmeter mode
void ohmmeter_mode() {
     870:	cf 93       	push	r28

    char key;
    LCD_Clearr();
     872:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
    ohm_display();
     876:	0e 94 73 06 	call	0xce6	; 0xce6 <ohm_display>
    LCD_Stringg("  ");
     87a:	82 ea       	ldi	r24, 0xA2	; 162
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	//PORTD = 0xFF;

    //printf("Ohmmeter mode activated. Press 9 to return to the main menu.\n");
    do {
        key = keyfind();
     882:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
     886:	c8 2f       	mov	r28, r24
		if(key == '9'){
     888:	89 33       	cpi	r24, 0x39	; 57
     88a:	11 f4       	brne	.+4      	; 0x890 <ohmmeter_mode+0x20>
			LCD_Clearr();
     88c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
		}
    } while (key != '9');
     890:	c9 33       	cpi	r28, 0x39	; 57
     892:	b9 f7       	brne	.-18     	; 0x882 <ohmmeter_mode+0x12>
}
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <voltmeter_mode>:




// Function to handle Voltmeter mode
void voltmeter_mode() {
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
	uint8_t range_uint8_char_converted;    // Variable to store the converted value
	uint8_t mode_uint8_char_converted;
	
    // Call your Voltmeter function here
	/******* choosing the Mode AC or DC ->>>**************/
	LCD_Clearr();
     89c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
	
	LCD_Stringg("Choose Mode : ");
     8a0:	85 ea       	ldi	r24, 0xA5	; 165
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_CURSOR_POSITIONN(1,0);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_CURSOR_POSITIONN>
	LCD_Stringg("1.AC");
     8b4:	84 eb       	ldi	r24, 0xB4	; 180
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_Stringg("   2.DC");
     8bc:	89 eb       	ldi	r24, 0xB9	; 185
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	/*   storing the value in mode   */
	char mode = keyfind();
     8c4:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
     8c8:	c8 2f       	mov	r28, r24
	
	mode_uint8_char_converted = mode;
	switch(mode){
     8ca:	81 33       	cpi	r24, 0x31	; 49
     8cc:	21 f0       	breq	.+8      	; 0x8d6 <voltmeter_mode+0x3e>
     8ce:	82 33       	cpi	r24, 0x32	; 50
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <voltmeter_mode+0x40>
		case '1':
		mode_uint8_char_converted = 0;
		break;
		case '2':
		mode_uint8_char_converted = 1;
     8d2:	c1 e0       	ldi	r28, 0x01	; 1
		break;
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <voltmeter_mode+0x40>
	char mode = keyfind();
	
	mode_uint8_char_converted = mode;
	switch(mode){
		case '1':
		mode_uint8_char_converted = 0;
     8d6:	c0 e0       	ldi	r28, 0x00	; 0
	// range 1: 0-20 volt		1
	// range 2: 0-200 volt		2
	// range 3: 0-2000 volt		3
	
	*/
	LCD_Clearr();
     8d8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
	//LCD_String("range:");
	LCD_Stringg("0:0-5v ");
     8dc:	81 ec       	ldi	r24, 0xC1	; 193
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	
	LCD_Stringg("1:0-20v ");
     8e4:	89 ec       	ldi	r24, 0xC9	; 201
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_CURSOR_POSITIONN(1,0);
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_CURSOR_POSITIONN>
	LCD_Stringg("2:0-200v");
     8f8:	82 ed       	ldi	r24, 0xD2	; 210
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_Stringg("3:0-2000v");
     900:	8b ed       	ldi	r24, 0xDB	; 219
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	/*   storing the value in range   */
	char range = keyfind();
     908:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
	switch(range){
     90c:	81 33       	cpi	r24, 0x31	; 49
     90e:	49 f0       	breq	.+18     	; 0x922 <voltmeter_mode+0x8a>
     910:	18 f4       	brcc	.+6      	; 0x918 <voltmeter_mode+0x80>
     912:	80 33       	cpi	r24, 0x30	; 48
     914:	61 f0       	breq	.+24     	; 0x92e <voltmeter_mode+0x96>
     916:	0c c0       	rjmp	.+24     	; 0x930 <voltmeter_mode+0x98>
     918:	82 33       	cpi	r24, 0x32	; 50
     91a:	29 f0       	breq	.+10     	; 0x926 <voltmeter_mode+0x8e>
     91c:	83 33       	cpi	r24, 0x33	; 51
     91e:	29 f0       	breq	.+10     	; 0x92a <voltmeter_mode+0x92>
     920:	07 c0       	rjmp	.+14     	; 0x930 <voltmeter_mode+0x98>
		case '0':
		range_uint8_char_converted = 0;
		break;
		case '1':
		range_uint8_char_converted = 1;
     922:	d1 e0       	ldi	r29, 0x01	; 1
		break;
     924:	05 c0       	rjmp	.+10     	; 0x930 <voltmeter_mode+0x98>
		case '2':
		range_uint8_char_converted = 2;
     926:	d2 e0       	ldi	r29, 0x02	; 2
		break;
     928:	03 c0       	rjmp	.+6      	; 0x930 <voltmeter_mode+0x98>
		case '3':
		range_uint8_char_converted = 3;
     92a:	d3 e0       	ldi	r29, 0x03	; 3
		break;
     92c:	01 c0       	rjmp	.+2      	; 0x930 <voltmeter_mode+0x98>
	LCD_Stringg("3:0-2000v");
	/*   storing the value in range   */
	char range = keyfind();
	switch(range){
		case '0':
		range_uint8_char_converted = 0;
     92e:	d0 e0       	ldi	r29, 0x00	; 0
		break;
	}
	
	
	/* NOW the mode and range values carry the user selections */
	LCD_Clearr();
     930:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
	LCD_Stringg("The value is : ");
     934:	85 ee       	ldi	r24, 0xE5	; 229
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
// 	uint8_t mode_uint8_char_converted;
	// Convert char to uint8_t
	
	//int volt_value;
	/*Wagdy : changed the channel input to one in tarbi3 function*/
	Volt_relay(mode_uint8_char_converted,range_uint8_char_converted,1);
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	6d 2f       	mov	r22, r29
     940:	8c 2f       	mov	r24, r28
     942:	0e 94 1f 02 	call	0x43e	; 0x43e <Volt_relay>
	
	
	
    //printf("Voltmeter mode activated. Press 9 to return to the main menu.\n");
    do {
        key = keyfind();
     946:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
     94a:	c8 2f       	mov	r28, r24
		if(key == '9'){
     94c:	89 33       	cpi	r24, 0x39	; 57
     94e:	11 f4       	brne	.+4      	; 0x954 <voltmeter_mode+0xbc>
			LCD_Clearr();
     950:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
		}
    } while (key != '9');
     954:	c9 33       	cpi	r28, 0x39	; 57
     956:	b9 f7       	brne	.-18     	; 0x946 <voltmeter_mode+0xae>
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <ammeter_mode>:


// Function to handle Ammeter mode

///////////////////////////////////////////////
void ammeter_mode() {
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
    char key;
    // Call your Ammeter function here
	LCD_Clearr();
     966:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
	
	LCD_Stringg("Choose Mode : ");
     96a:	85 ea       	ldi	r24, 0xA5	; 165
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_CURSOR_POSITIONN(1,0);
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_CURSOR_POSITIONN>
	LCD_Stringg("1.DC");
     97e:	85 ef       	ldi	r24, 0xF5	; 245
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_Stringg("   2.AC");
     986:	8a ef       	ldi	r24, 0xFA	; 250
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	
	char mode = keyfind();
     98e:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
     992:	c8 2f       	mov	r28, r24
	/*// range 1: 0-5 mA		0	
	//   range 5: 0-50 mA	1
	//   range 3: 0-4 mA		2
	//  		*/
	
	LCD_Clearr();
     994:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
	
	
	LCD_Stringg("1:0-5 mA ");
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_Stringg("2:0-50 mA");
     9a0:	8c e0       	ldi	r24, 0x0C	; 12
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	LCD_CURSOR_POSITIONN(1,0);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_CURSOR_POSITIONN>
	LCD_Stringg("3:0-4 mA");
     9b4:	86 e1       	ldi	r24, 0x16	; 22
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
	
	/*   storing the value in range   */
	char range = keyfind();
     9bc:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
     9c0:	d8 2f       	mov	r29, r24
	
	
	/* NOW the mode and range values carry the user selections */
	LCD_Clearr();
     9c2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
	//LCD_Stringg("The value is : ");
	
	uint8_t range_uint8_char_converted;

	switch(range){
     9c6:	d1 33       	cpi	r29, 0x31	; 49
     9c8:	49 f0       	breq	.+18     	; 0x9dc <ammeter_mode+0x7e>
     9ca:	18 f4       	brcc	.+6      	; 0x9d2 <ammeter_mode+0x74>
     9cc:	d0 33       	cpi	r29, 0x30	; 48
     9ce:	61 f0       	breq	.+24     	; 0x9e8 <ammeter_mode+0x8a>
     9d0:	0c c0       	rjmp	.+24     	; 0x9ea <ammeter_mode+0x8c>
     9d2:	d2 33       	cpi	r29, 0x32	; 50
     9d4:	29 f0       	breq	.+10     	; 0x9e0 <ammeter_mode+0x82>
     9d6:	d3 33       	cpi	r29, 0x33	; 51
     9d8:	29 f0       	breq	.+10     	; 0x9e4 <ammeter_mode+0x86>
     9da:	07 c0       	rjmp	.+14     	; 0x9ea <ammeter_mode+0x8c>
		case '0':
		range_uint8_char_converted = 0;
		break;
		case '1':
		range_uint8_char_converted = 1;
     9dc:	11 e0       	ldi	r17, 0x01	; 1
		break;
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <ammeter_mode+0x8c>
		case '2':
		range_uint8_char_converted = 2;
     9e0:	12 e0       	ldi	r17, 0x02	; 2
		break;
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <ammeter_mode+0x8c>
		case '3':
		range_uint8_char_converted = 3;
     9e4:	13 e0       	ldi	r17, 0x03	; 3
		break;
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <ammeter_mode+0x8c>
	
	uint8_t range_uint8_char_converted;

	switch(range){
		case '0':
		range_uint8_char_converted = 0;
     9e8:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	
	int mode_uint8_char_converted;
	
	switch(mode){
     9ea:	c1 33       	cpi	r28, 0x31	; 49
     9ec:	49 f0       	breq	.+18     	; 0xa00 <ammeter_mode+0xa2>
     9ee:	18 f4       	brcc	.+6      	; 0x9f6 <ammeter_mode+0x98>
     9f0:	c0 33       	cpi	r28, 0x30	; 48
     9f2:	61 f0       	breq	.+24     	; 0xa0c <ammeter_mode+0xae>
     9f4:	0c c0       	rjmp	.+24     	; 0xa0e <ammeter_mode+0xb0>
     9f6:	c2 33       	cpi	r28, 0x32	; 50
     9f8:	29 f0       	breq	.+10     	; 0xa04 <ammeter_mode+0xa6>
     9fa:	c3 33       	cpi	r28, 0x33	; 51
     9fc:	29 f0       	breq	.+10     	; 0xa08 <ammeter_mode+0xaa>
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <ammeter_mode+0xb0>
		case '0':
		mode_uint8_char_converted = 0;
		break;
		case '1':
		mode_uint8_char_converted = 1;
     a00:	01 e0       	ldi	r16, 0x01	; 1
		break;
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <ammeter_mode+0xb0>
		case '2':
		mode_uint8_char_converted = 2;
     a04:	02 e0       	ldi	r16, 0x02	; 2
		break;
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <ammeter_mode+0xb0>
		case '3':
		mode_uint8_char_converted = 3;
     a08:	03 e0       	ldi	r16, 0x03	; 3
		break;
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <ammeter_mode+0xb0>
	
	int mode_uint8_char_converted;
	
	switch(mode){
		case '0':
		mode_uint8_char_converted = 0;
     a0c:	00 e0       	ldi	r16, 0x00	; 0
		break;
		default:
		break;
	}
	
	Ammeter( range_uint8_char_converted,  mode_uint8_char_converted);
     a0e:	60 2f       	mov	r22, r16
     a10:	81 2f       	mov	r24, r17
     a12:	0e 94 c1 01 	call	0x382	; 0x382 <Ammeter>
	
	
    //printf("Ammeter mode activated. Press 9 to return to the main menu.\n");
    do {
        key = keyfind();
     a16:	0e 94 b3 02 	call	0x566	; 0x566 <keyfind>
     a1a:	c8 2f       	mov	r28, r24
		if(key == '9'){
     a1c:	89 33       	cpi	r24, 0x39	; 57
     a1e:	11 f4       	brne	.+4      	; 0xa24 <ammeter_mode+0xc6>
			LCD_Clearr();
     a20:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <LCD_Clearr>
		}
    } while (key != '9');
     a24:	c9 33       	cpi	r28, 0x39	; 57
     a26:	b9 f7       	brne	.-18     	; 0xa16 <ammeter_mode+0xb8>
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <main>:
int main() {
    /***************************************/
    //this is related to my ohmConfigurtaions

    //PORTC |=(1<< 6);
	DDRA |= (1 << 7);
     a32:	8a b3       	in	r24, 0x1a	; 26
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << 7);
     a38:	8b b3       	in	r24, 0x1b	; 27
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	8b bb       	out	0x1b, r24	; 27
	
	ADC_Initt();
     a3e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <ADC_Initt>
	
	LCD_Initt();
     a42:	0e 94 b3 05 	call	0xb66	; 0xb66 <LCD_Initt>

    /***************************************/
    char choice;

    do {
        choice = get_user_choice();
     a46:	0e 94 23 04 	call	0x846	; 0x846 <get_user_choice>

        switch (choice) {
     a4a:	82 33       	cpi	r24, 0x32	; 50
     a4c:	61 f0       	breq	.+24     	; 0xa66 <main+0x34>
     a4e:	18 f4       	brcc	.+6      	; 0xa56 <main+0x24>
     a50:	81 33       	cpi	r24, 0x31	; 49
     a52:	31 f0       	breq	.+12     	; 0xa60 <main+0x2e>
     a54:	13 c0       	rjmp	.+38     	; 0xa7c <main+0x4a>
     a56:	83 33       	cpi	r24, 0x33	; 51
     a58:	49 f0       	breq	.+18     	; 0xa6c <main+0x3a>
     a5a:	84 33       	cpi	r24, 0x34	; 52
     a5c:	51 f0       	breq	.+20     	; 0xa72 <main+0x40>
     a5e:	0e c0       	rjmp	.+28     	; 0xa7c <main+0x4a>
            case '1':
                ohmmeter_mode();
     a60:	0e 94 38 04 	call	0x870	; 0x870 <ohmmeter_mode>
                break;
     a64:	f0 cf       	rjmp	.-32     	; 0xa46 <main+0x14>
            case '2':
                voltmeter_mode();
     a66:	0e 94 4c 04 	call	0x898	; 0x898 <voltmeter_mode>
                break;
     a6a:	ed cf       	rjmp	.-38     	; 0xa46 <main+0x14>
            case '3':
                ammeter_mode();
     a6c:	0e 94 af 04 	call	0x95e	; 0x95e <ammeter_mode>
                break;
     a70:	ea cf       	rjmp	.-44     	; 0xa46 <main+0x14>
            case '4':
                printf("Exiting program...\n");
     a72:	8f e1       	ldi	r24, 0x1F	; 31
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 2b 0a 	call	0x1456	; 0x1456 <puts>
                break;
     a7a:	e5 cf       	rjmp	.-54     	; 0xa46 <main+0x14>
            default:
                printf("Invalid choice. Please enter a number between 1 and 4.\n");
     a7c:	82 e3       	ldi	r24, 0x32	; 50
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 2b 0a 	call	0x1456	; 0x1456 <puts>
                break;
     a84:	e0 cf       	rjmp	.-64     	; 0xa46 <main+0x14>

00000a86 <ADC_init>:
 *  Author: asus
 */ 
#include "ADC.h"

void ADC_init(uint8_t adc_ch){
	bitclear(DDRA,adc_ch);// set ADC channel to be input
     a86:	9a b3       	in	r25, 0x1a	; 26
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <ADC_init+0xc>
     a8e:	22 0f       	add	r18, r18
     a90:	33 1f       	adc	r19, r19
     a92:	8a 95       	dec	r24
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <ADC_init+0x8>
     a96:	20 95       	com	r18
     a98:	29 23       	and	r18, r25
     a9a:	2a bb       	out	0x1a, r18	; 26
	bitset(ADMUX,6); // Set VREF to be VCC
     a9c:	87 b1       	in	r24, 0x07	; 7
     a9e:	80 64       	ori	r24, 0x40	; 64
     aa0:	87 b9       	out	0x07, r24	; 7
	bitset(ADCSRA,7); // Enable ADC
     aa2:	86 b1       	in	r24, 0x06	; 6
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	86 b9       	out	0x06, r24	; 6
	bitset(ADCSRA,2);
     aa8:	86 b1       	in	r24, 0x06	; 6
     aaa:	84 60       	ori	r24, 0x04	; 4
     aac:	86 b9       	out	0x06, r24	; 6
	bitset(ADCSRA,1);
     aae:	86 b1       	in	r24, 0x06	; 6
     ab0:	82 60       	ori	r24, 0x02	; 2
     ab2:	86 b9       	out	0x06, r24	; 6
	bitset(ADCSRA,0);
     ab4:	86 b1       	in	r24, 0x06	; 6
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	86 b9       	out	0x06, r24	; 6
     aba:	08 95       	ret

00000abc <ADC_read>:
	
}
void ADC_read(uint8_t adc_ch,int *value){
	ADMUX |= (adc_ch & 0x0F);
     abc:	97 b1       	in	r25, 0x07	; 7
     abe:	8f 70       	andi	r24, 0x0F	; 15
     ac0:	98 2b       	or	r25, r24
     ac2:	97 b9       	out	0x07, r25	; 7
	bitset(ADCSRA,6);
     ac4:	86 b1       	in	r24, 0x06	; 6
     ac6:	80 64       	ori	r24, 0x40	; 64
     ac8:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<4))==0);
     aca:	34 9b       	sbis	0x06, 4	; 6
     acc:	fe cf       	rjmp	.-4      	; 0xaca <ADC_read+0xe>
	//*value = (ADCH<<8) | ADCL;
	// 	*valuel = ADCL;
	// 	*valueh = ADCH;
	uint8_t valuel = ADCL;
     ace:	24 b1       	in	r18, 0x04	; 4
	uint8_t valueh = ADCH;
     ad0:	85 b1       	in	r24, 0x05	; 5
	uint16_t v  = (valueh << 8) | valuel;
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	98 2f       	mov	r25, r24
     ad6:	88 27       	eor	r24, r24
     ad8:	82 2b       	or	r24, r18
	*value = (int) v;
     ada:	fb 01       	movw	r30, r22
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	80 83       	st	Z, r24
     ae0:	08 95       	ret

00000ae2 <LCD_Commandd>:
	if (row == 0 && pos<16)
	LCD_Commandd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Commandd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_Stringg(str);					/* Call LCD string function */
}
     ae2:	88 bb       	out	0x18, r24	; 24
     ae4:	82 b3       	in	r24, 0x12	; 18
     ae6:	8f 7d       	andi	r24, 0xDF	; 223
     ae8:	82 bb       	out	0x12, r24	; 18
     aea:	82 b3       	in	r24, 0x12	; 18
     aec:	8f 7b       	andi	r24, 0xBF	; 191
     aee:	82 bb       	out	0x12, r24	; 18
     af0:	82 b3       	in	r24, 0x12	; 18
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	82 bb       	out	0x12, r24	; 18
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	8a 95       	dec	r24
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <LCD_Commandd+0x16>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <LCD_Commandd+0x1c>
     afe:	82 b3       	in	r24, 0x12	; 18
     b00:	8f 77       	andi	r24, 0x7F	; 127
     b02:	82 bb       	out	0x12, r24	; 18
     b04:	8f e6       	ldi	r24, 0x6F	; 111
     b06:	97 e1       	ldi	r25, 0x17	; 23
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCD_Commandd+0x26>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <LCD_Commandd+0x2c>
     b0e:	00 00       	nop
     b10:	08 95       	ret

00000b12 <LCD_Charr>:
     b12:	88 bb       	out	0x18, r24	; 24
     b14:	82 b3       	in	r24, 0x12	; 18
     b16:	80 62       	ori	r24, 0x20	; 32
     b18:	82 bb       	out	0x12, r24	; 18
     b1a:	82 b3       	in	r24, 0x12	; 18
     b1c:	8f 7b       	andi	r24, 0xBF	; 191
     b1e:	82 bb       	out	0x12, r24	; 18
     b20:	82 b3       	in	r24, 0x12	; 18
     b22:	80 68       	ori	r24, 0x80	; 128
     b24:	82 bb       	out	0x12, r24	; 18
     b26:	8d e0       	ldi	r24, 0x0D	; 13
     b28:	8a 95       	dec	r24
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <LCD_Charr+0x16>
     b2c:	00 00       	nop
     b2e:	82 b3       	in	r24, 0x12	; 18
     b30:	8f 77       	andi	r24, 0x7F	; 127
     b32:	82 bb       	out	0x12, r24	; 18
     b34:	8f e0       	ldi	r24, 0x0F	; 15
     b36:	97 e2       	ldi	r25, 0x27	; 39
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <LCD_Charr+0x26>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <LCD_Charr+0x2c>
     b3e:	00 00       	nop
     b40:	08 95       	ret

00000b42 <LCD_WRITE_DATAA>:
     b42:	88 bb       	out	0x18, r24	; 24
     b44:	82 b3       	in	r24, 0x12	; 18
     b46:	80 62       	ori	r24, 0x20	; 32
     b48:	82 bb       	out	0x12, r24	; 18
     b4a:	82 b3       	in	r24, 0x12	; 18
     b4c:	8f 7b       	andi	r24, 0xBF	; 191
     b4e:	82 bb       	out	0x12, r24	; 18
     b50:	82 b3       	in	r24, 0x12	; 18
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	82 bb       	out	0x12, r24	; 18
     b56:	8d e0       	ldi	r24, 0x0D	; 13
     b58:	8a 95       	dec	r24
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <LCD_WRITE_DATAA+0x16>
     b5c:	00 00       	nop
     b5e:	82 b3       	in	r24, 0x12	; 18
     b60:	8f 77       	andi	r24, 0x7F	; 127
     b62:	82 bb       	out	0x12, r24	; 18
     b64:	08 95       	ret

00000b66 <LCD_Initt>:
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	81 bb       	out	0x11, r24	; 17
     b6a:	87 bb       	out	0x17, r24	; 23
     b6c:	8f e3       	ldi	r24, 0x3F	; 63
     b6e:	9c e9       	ldi	r25, 0x9C	; 156
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <LCD_Initt+0xa>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <LCD_Initt+0x10>
     b76:	00 00       	nop
     b78:	88 e3       	ldi	r24, 0x38	; 56
     b7a:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     b7e:	8c e0       	ldi	r24, 0x0C	; 12
     b80:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     b84:	86 e0       	ldi	r24, 0x06	; 6
     b86:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     b90:	80 e8       	ldi	r24, 0x80	; 128
     b92:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     b96:	08 95       	ret

00000b98 <LCD_Stringg>:
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	8c 01       	movw	r16, r24
     ba2:	c0 e0       	ldi	r28, 0x00	; 0
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <LCD_Stringg+0x16>
     ba8:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_Charr>
     bac:	21 96       	adiw	r28, 0x01	; 1
     bae:	f8 01       	movw	r30, r16
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	80 81       	ld	r24, Z
     bb6:	81 11       	cpse	r24, r1
     bb8:	f7 cf       	rjmp	.-18     	; 0xba8 <LCD_Stringg+0x10>
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <LCD_Clearr>:

void LCD_Clearr()
{
	LCD_Commandd (0x01);		/* clear display */
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
	LCD_Commandd (0x80);		/* cursor at home position */
     bca:	80 e8       	ldi	r24, 0x80	; 128
     bcc:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     bd0:	08 95       	ret

00000bd2 <LCD_CURSOR_POSITIONN>:

void LCD_CURSOR_POSITIONN(uint8_t row, uint8_t col)
{
	uint8_t address = 0;
	
	if(row == 0)
     bd2:	88 23       	and	r24, r24
     bd4:	21 f0       	breq	.+8      	; 0xbde <LCD_CURSOR_POSITIONN+0xc>
	{
		address = 0x80;
	}
	else if(row == 1)
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <LCD_CURSOR_POSITIONN+0x10>
	LCD_Commandd (0x80);		/* cursor at home position */
}

void LCD_CURSOR_POSITIONN(uint8_t row, uint8_t col)
{
	uint8_t address = 0;
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <LCD_CURSOR_POSITIONN+0x12>
	
	if(row == 0)
	{
		address = 0x80;
     bde:	80 e8       	ldi	r24, 0x80	; 128
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <LCD_CURSOR_POSITIONN+0x12>
	}
	else if(row == 1)
	{
		address = 0xC0;
     be2:	80 ec       	ldi	r24, 0xC0	; 192
	}
	
	if(col < 16)
     be4:	60 31       	cpi	r22, 0x10	; 16
     be6:	08 f4       	brcc	.+2      	; 0xbea <LCD_CURSOR_POSITIONN+0x18>
	{
		address += col;
     be8:	86 0f       	add	r24, r22
	}
	
	LCD_Commandd(address);
     bea:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
     bee:	08 95       	ret

00000bf0 <ADC_Initt>:
/************************************************************************************************************/


void ADC_Initt() {
	// Configure the first 3 pins of port A as ADC inputs
	DDRA &= ~(0b00000111);  // Set PA0, PA1, and PA2 as input
     bf0:	8a b3       	in	r24, 0x1a	; 26
     bf2:	88 7f       	andi	r24, 0xF8	; 248
     bf4:	8a bb       	out	0x1a, r24	; 26

	// Set the other pins of port A (PA3 to PA7) as output
	DDRA |= 0b11111000;  // Set PA3 to PA7 as output
     bf6:	8a b3       	in	r24, 0x1a	; 26
     bf8:	88 6f       	ori	r24, 0xF8	; 248
     bfa:	8a bb       	out	0x1a, r24	; 26

	// Set all output pins of port A to high
	PORTA |= 0b10000000; // Set PA3 to PA7 high
     bfc:	8b b3       	in	r24, 0x1b	; 27
     bfe:	80 68       	ori	r24, 0x80	; 128
     c00:	8b bb       	out	0x1b, r24	; 27

	// Enable ADC, set ADC clock division factor to 128
	ADCSRA = 0x87;
     c02:	87 e8       	ldi	r24, 0x87	; 135
     c04:	86 b9       	out	0x06, r24	; 6

	// Set ADC reference voltage to AVCC and ADC channel to 0
	ADMUX = 0x40;
     c06:	80 e4       	ldi	r24, 0x40	; 64
     c08:	87 b9       	out	0x07, r24	; 7
     c0a:	08 95       	ret

00000c0c <ADC_Readd>:

int ADC_Readd(char channel)
{
	int Ain,AinLow;

	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
     c0c:	97 b1       	in	r25, 0x07	; 7
     c0e:	8f 70       	andi	r24, 0x0F	; 15
     c10:	98 2b       	or	r25, r24
     c12:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		    /* Start conversion */
     c14:	86 b1       	in	r24, 0x06	; 6
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
     c1a:	34 9b       	sbis	0x06, 4	; 6
     c1c:	fe cf       	rjmp	.-4      	; 0xc1a <ADC_Readd+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1e:	8a e1       	ldi	r24, 0x1A	; 26
     c20:	8a 95       	dec	r24
     c22:	f1 f7       	brne	.-4      	; 0xc20 <ADC_Readd+0x14>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <ADC_Readd+0x1a>

	_delay_us(10);
	AinLow = (int)ADCL;		    /* Read lower byte*/
     c26:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and
     c28:	85 b1       	in	r24, 0x05	; 5
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	98 2f       	mov	r25, r24
     c2e:	88 27       	eor	r24, r24
					               Multiply with weight */
	Ain = Ain + AinLow;
	return(Ain);			    /* Return digital value*/
}
     c30:	82 0f       	add	r24, r18
     c32:	91 1d       	adc	r25, r1
     c34:	08 95       	ret

00000c36 <LCD_PRINT_INTT>:
//*********************************************************************************
void LCD_PRINT_INTT( int data, const unsigned int numOfDigits)
{
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	2a 97       	sbiw	r28, 0x0a	; 10
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	dc 01       	movw	r26, r24
     c54:	7b 01       	movw	r14, r22
	unsigned char ch[10] = {' '};
     c56:	9e 01       	movw	r18, r28
     c58:	2f 5f       	subi	r18, 0xFF	; 255
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	f9 01       	movw	r30, r18
     c60:	11 92       	st	Z+, r1
     c62:	8a 95       	dec	r24
     c64:	e9 f7       	brne	.-6      	; 0xc60 <LCD_PRINT_INTT+0x2a>
     c66:	80 e2       	ldi	r24, 0x20	; 32
     c68:	89 83       	std	Y+1, r24	; 0x01

	for(int j = 0 ; j < numOfDigits ; j++)
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	0a c0       	rjmp	.+20     	; 0xc84 <LCD_PRINT_INTT+0x4e>
	{
		ch[j] = ' ';
     c70:	e1 e0       	ldi	r30, 0x01	; 1
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	ec 0f       	add	r30, r28
     c76:	fd 1f       	adc	r31, r29
     c78:	e2 0f       	add	r30, r18
     c7a:	f3 1f       	adc	r31, r19
     c7c:	90 e2       	ldi	r25, 0x20	; 32
     c7e:	90 83       	st	Z, r25
//*********************************************************************************
void LCD_PRINT_INTT( int data, const unsigned int numOfDigits)
{
	unsigned char ch[10] = {' '};

	for(int j = 0 ; j < numOfDigits ; j++)
     c80:	2f 5f       	subi	r18, 0xFF	; 255
     c82:	3f 4f       	sbci	r19, 0xFF	; 255
     c84:	2e 15       	cp	r18, r14
     c86:	3f 05       	cpc	r19, r15
     c88:	98 f3       	brcs	.-26     	; 0xc70 <LCD_PRINT_INTT+0x3a>
	{
		ch[j] = ' ';
	}

	itoa(data, ch, 10);
     c8a:	4a e0       	ldi	r20, 0x0A	; 10
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	be 01       	movw	r22, r28
     c90:	6f 5f       	subi	r22, 0xFF	; 255
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	cd 01       	movw	r24, r26
     c96:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <itoa>

	for(int j = 0 ; j < numOfDigits ; ++j)
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <LCD_PRINT_INTT+0x90>
	{
		if(ch[j] < '0' || ch[j] > '9')
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	ec 0f       	add	r30, r28
     ca6:	fd 1f       	adc	r31, r29
     ca8:	e0 0f       	add	r30, r16
     caa:	f1 1f       	adc	r31, r17
     cac:	80 81       	ld	r24, Z
     cae:	90 ed       	ldi	r25, 0xD0	; 208
     cb0:	98 0f       	add	r25, r24
     cb2:	9a 30       	cpi	r25, 0x0A	; 10
     cb4:	20 f0       	brcs	.+8      	; 0xcbe <LCD_PRINT_INTT+0x88>
		LCD_WRITE_DATAA(' ');
     cb6:	80 e2       	ldi	r24, 0x20	; 32
     cb8:	0e 94 a1 05 	call	0xb42	; 0xb42 <LCD_WRITE_DATAA>
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <LCD_PRINT_INTT+0x8c>
		else
		LCD_WRITE_DATAA(ch[j]);
     cbe:	0e 94 a1 05 	call	0xb42	; 0xb42 <LCD_WRITE_DATAA>
		ch[j] = ' ';
	}

	itoa(data, ch, 10);

	for(int j = 0 ; j < numOfDigits ; ++j)
     cc2:	0f 5f       	subi	r16, 0xFF	; 255
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	0e 15       	cp	r16, r14
     cc8:	1f 05       	cpc	r17, r15
     cca:	50 f3       	brcs	.-44     	; 0xca0 <LCD_PRINT_INTT+0x6a>
		LCD_WRITE_DATAA(' ');
		else
		LCD_WRITE_DATAA(ch[j]);

	}
}
     ccc:	2a 96       	adiw	r28, 0x0a	; 10
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret

00000ce6 <ohm_display>:

char buffer[25];

void ohm_display(){
	/* LCD16x2 cursor position */
	value=ADC_Readd(2);	/* Read ADC channel 0 */ // this function returns integer of the binary
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	0e 94 06 06 	call	0xc0c	; 0xc0c <ADC_Readd>
     cec:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <value+0x1>
     cf0:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <value>
	//after getting the value of the ADCREAD it retruns integer with ration   5v --> 1023 & 2.5v --> 512     and so on
	//creating a function to make this equation
	if (value < 26){ //above 25k ohm
     cf4:	8a 31       	cpi	r24, 0x1A	; 26
     cf6:	91 05       	cpc	r25, r1
     cf8:	0c f0       	brlt	.+2      	; 0xcfc <ohm_display+0x16>
     cfa:	41 c0       	rjmp	.+130    	; 0xd7e <ohm_display+0x98>
		realvolt = ((value * 5.0) / 1023);
     cfc:	bc 01       	movw	r22, r24
     cfe:	99 0f       	add	r25, r25
     d00:	88 0b       	sbc	r24, r24
     d02:	99 0b       	sbc	r25, r25
     d04:	0e 94 6d 08 	call	0x10da	; 0x10da <__floatsisf>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 ea       	ldi	r20, 0xA0	; 160
     d0e:	50 e4       	ldi	r21, 0x40	; 64
     d10:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 ec       	ldi	r19, 0xC0	; 192
     d18:	4f e7       	ldi	r20, 0x7F	; 127
     d1a:	54 e4       	ldi	r21, 0x44	; 68
     d1c:	0e 94 c3 07 	call	0xf86	; 0xf86 <__divsf3>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <realvolt>
     d28:	70 93 cc 01 	sts	0x01CC, r23	; 0x8001cc <realvolt+0x1>
     d2c:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <realvolt+0x2>
     d30:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <realvolt+0x3>
		resisreq = (5/(realvolt))-(1+10);
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 ea       	ldi	r24, 0xA0	; 160
     d3a:	90 e4       	ldi	r25, 0x40	; 64
     d3c:	0e 94 c3 07 	call	0xf86	; 0xf86 <__divsf3>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e3       	ldi	r20, 0x30	; 48
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 56 07 	call	0xeac	; 0xeac <__subsf3>
     d4c:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     d50:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <resisreq+0x1>
     d54:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <resisreq>
		LCD_Commandd(0x80);
     d58:	80 e8       	ldi	r24, 0x80	; 128
     d5a:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
		LCD_Stringg("in Kohms is: ");
     d5e:	89 e6       	ldi	r24, 0x69	; 105
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
		LCD_Commandd(0xC0);
     d66:	80 ec       	ldi	r24, 0xC0	; 192
     d68:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
		LCD_PRINT_INTT(resisreq , 6);
     d6c:	66 e0       	ldi	r22, 0x06	; 6
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <resisreq>
     d74:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <resisreq+0x1>
     d78:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_PRINT_INTT>
     d7c:	08 95       	ret

	}
	else{
		realvolt = ((value * 5.0) / 1023);
     d7e:	bc 01       	movw	r22, r24
     d80:	99 0f       	add	r25, r25
     d82:	88 0b       	sbc	r24, r24
     d84:	99 0b       	sbc	r25, r25
     d86:	0e 94 6d 08 	call	0x10da	; 0x10da <__floatsisf>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 ea       	ldi	r20, 0xA0	; 160
     d90:	50 e4       	ldi	r21, 0x40	; 64
     d92:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__mulsf3>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 ec       	ldi	r19, 0xC0	; 192
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	54 e4       	ldi	r21, 0x44	; 68
     d9e:	0e 94 c3 07 	call	0xf86	; 0xf86 <__divsf3>
     da2:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <realvolt>
     da6:	70 93 cc 01 	sts	0x01CC, r23	; 0x8001cc <realvolt+0x1>
     daa:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <realvolt+0x2>
     dae:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <realvolt+0x3>
		/*************** NOTE that the LCD has a max value of integer to print which is 16360*********/
		resisreq = (5/(realvolt/1000.0))-(1000+10000);
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a e7       	ldi	r20, 0x7A	; 122
     db8:	54 e4       	ldi	r21, 0x44	; 68
     dba:	0e 94 c3 07 	call	0xf86	; 0xf86 <__divsf3>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	80 ea       	ldi	r24, 0xA0	; 160
     dc8:	90 e4       	ldi	r25, 0x40	; 64
     dca:	0e 94 c3 07 	call	0xf86	; 0xf86 <__divsf3>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 ee       	ldi	r19, 0xE0	; 224
     dd2:	4b e2       	ldi	r20, 0x2B	; 43
     dd4:	56 e4       	ldi	r21, 0x46	; 70
     dd6:	0e 94 56 07 	call	0xeac	; 0xeac <__subsf3>
     dda:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     dde:	9b 01       	movw	r18, r22
     de0:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <resisreq+0x1>
     de4:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <resisreq>
		if(resisreq< 10000 && resisreq> 0){
     de8:	61 50       	subi	r22, 0x01	; 1
     dea:	71 09       	sbc	r23, r1
     dec:	6f 30       	cpi	r22, 0x0F	; 15
     dee:	77 42       	sbci	r23, 0x27	; 39
     df0:	98 f4       	brcc	.+38     	; 0xe18 <ohm_display+0x132>
			//0x80	Force the cursor to the beginning of the 1st line
			//0xC0	Force the cursor to the beginning of the 2nd line
			LCD_Commandd(0x80);
     df2:	80 e8       	ldi	r24, 0x80	; 128
     df4:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_Stringg("in ohms is: ");
     df8:	87 e7       	ldi	r24, 0x77	; 119
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
			LCD_Commandd(0xC0);
     e00:	80 ec       	ldi	r24, 0xC0	; 192
     e02:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_PRINT_INTT(resisreq , 6);
     e06:	66 e0       	ldi	r22, 0x06	; 6
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <resisreq>
     e0e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <resisreq+0x1>
     e12:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_PRINT_INTT>
     e16:	08 95       	ret
		}
		else if( resisreq > 10000 ) {
     e18:	21 31       	cpi	r18, 0x11	; 17
     e1a:	87 e2       	ldi	r24, 0x27	; 39
     e1c:	38 07       	cpc	r19, r24
     e1e:	c4 f0       	brlt	.+48     	; 0xe50 <ohm_display+0x16a>
			LCD_Commandd(0x80);
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_Stringg("in Kohms is: ");
     e26:	89 e6       	ldi	r24, 0x69	; 105
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
			LCD_Commandd(0xC0);
     e2e:	80 ec       	ldi	r24, 0xC0	; 192
     e30:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_PRINT_INTT(resisreq/1000 , 6);
     e34:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <resisreq>
     e38:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <resisreq+0x1>
     e3c:	68 ee       	ldi	r22, 0xE8	; 232
     e3e:	73 e0       	ldi	r23, 0x03	; 3
     e40:	0e 94 b3 09 	call	0x1366	; 0x1366 <__divmodhi4>
     e44:	cb 01       	movw	r24, r22
     e46:	66 e0       	ldi	r22, 0x06	; 6
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 1b 06 	call	0xc36	; 0xc36 <LCD_PRINT_INTT>
     e4e:	08 95       	ret

			}else if (resisreq < 50){
     e50:	22 33       	cpi	r18, 0x32	; 50
     e52:	31 05       	cpc	r19, r1
     e54:	7c f4       	brge	.+30     	; 0xe74 <ohm_display+0x18e>
			LCD_Commandd(0x80);
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_Stringg("the value is ");
     e5c:	84 e8       	ldi	r24, 0x84	; 132
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
			LCD_Commandd(0xC0);
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_Stringg(" below 50ohm ");
     e6a:	82 e9       	ldi	r24, 0x92	; 146
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
     e72:	08 95       	ret
			}else{
			LCD_Commandd(0x80);
     e74:	80 e8       	ldi	r24, 0x80	; 128
     e76:	0e 94 71 05 	call	0xae2	; 0xae2 <LCD_Commandd>
			LCD_Stringg("Error !");
     e7a:	80 ea       	ldi	r24, 0xA0	; 160
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 cc 05 	call	0xb98	; 0xb98 <LCD_Stringg>
     e82:	08 95       	ret

00000e84 <get_digit_count>:

int get_digit_count(int num) {
	int count = 0;

	// Handle the case when the number is zero separately
	if (num == 0) {
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	79 f0       	breq	.+30     	; 0xea6 <get_digit_count+0x22>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <get_digit_count+0x18>
		return 1;
	}

	// Count digits by repeatedly dividing by 10
	while (num != 0) {
		num /= 10;
     e8e:	6a e0       	ldi	r22, 0x0A	; 10
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	0e 94 b3 09 	call	0x1366	; 0x1366 <__divmodhi4>
     e96:	cb 01       	movw	r24, r22
		count++;
     e98:	2f 5f       	subi	r18, 0xFF	; 255
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
	if (num == 0) {
		return 1;
	}

	// Count digits by repeatedly dividing by 10
	while (num != 0) {
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	b9 f7       	brne	.-18     	; 0xe8e <get_digit_count+0xa>
		num /= 10;
		count++;
	}

	return count;
     ea0:	82 2f       	mov	r24, r18
     ea2:	93 2f       	mov	r25, r19
     ea4:	08 95       	ret
int get_digit_count(int num) {
	int count = 0;

	// Handle the case when the number is zero separately
	if (num == 0) {
		return 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
		num /= 10;
		count++;
	}

	return count;
     eaa:	08 95       	ret

00000eac <__subsf3>:
     eac:	50 58       	subi	r21, 0x80	; 128

00000eae <__addsf3>:
     eae:	bb 27       	eor	r27, r27
     eb0:	aa 27       	eor	r26, r26
     eb2:	0e 94 6e 07 	call	0xedc	; 0xedc <__addsf3x>
     eb6:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_round>
     eba:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_pscA>
     ebe:	38 f0       	brcs	.+14     	; 0xece <__addsf3+0x20>
     ec0:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_pscB>
     ec4:	20 f0       	brcs	.+8      	; 0xece <__addsf3+0x20>
     ec6:	39 f4       	brne	.+14     	; 0xed6 <__addsf3+0x28>
     ec8:	9f 3f       	cpi	r25, 0xFF	; 255
     eca:	19 f4       	brne	.+6      	; 0xed2 <__addsf3+0x24>
     ecc:	26 f4       	brtc	.+8      	; 0xed6 <__addsf3+0x28>
     ece:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_nan>
     ed2:	0e f4       	brtc	.+2      	; 0xed6 <__addsf3+0x28>
     ed4:	e0 95       	com	r30
     ed6:	e7 fb       	bst	r30, 7
     ed8:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>

00000edc <__addsf3x>:
     edc:	e9 2f       	mov	r30, r25
     ede:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_split3>
     ee2:	58 f3       	brcs	.-42     	; 0xeba <__addsf3+0xc>
     ee4:	ba 17       	cp	r27, r26
     ee6:	62 07       	cpc	r22, r18
     ee8:	73 07       	cpc	r23, r19
     eea:	84 07       	cpc	r24, r20
     eec:	95 07       	cpc	r25, r21
     eee:	20 f0       	brcs	.+8      	; 0xef8 <__addsf3x+0x1c>
     ef0:	79 f4       	brne	.+30     	; 0xf10 <__addsf3x+0x34>
     ef2:	a6 f5       	brtc	.+104    	; 0xf5c <__addsf3x+0x80>
     ef4:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__fp_zero>
     ef8:	0e f4       	brtc	.+2      	; 0xefc <__addsf3x+0x20>
     efa:	e0 95       	com	r30
     efc:	0b 2e       	mov	r0, r27
     efe:	ba 2f       	mov	r27, r26
     f00:	a0 2d       	mov	r26, r0
     f02:	0b 01       	movw	r0, r22
     f04:	b9 01       	movw	r22, r18
     f06:	90 01       	movw	r18, r0
     f08:	0c 01       	movw	r0, r24
     f0a:	ca 01       	movw	r24, r20
     f0c:	a0 01       	movw	r20, r0
     f0e:	11 24       	eor	r1, r1
     f10:	ff 27       	eor	r31, r31
     f12:	59 1b       	sub	r21, r25
     f14:	99 f0       	breq	.+38     	; 0xf3c <__addsf3x+0x60>
     f16:	59 3f       	cpi	r21, 0xF9	; 249
     f18:	50 f4       	brcc	.+20     	; 0xf2e <__addsf3x+0x52>
     f1a:	50 3e       	cpi	r21, 0xE0	; 224
     f1c:	68 f1       	brcs	.+90     	; 0xf78 <__addsf3x+0x9c>
     f1e:	1a 16       	cp	r1, r26
     f20:	f0 40       	sbci	r31, 0x00	; 0
     f22:	a2 2f       	mov	r26, r18
     f24:	23 2f       	mov	r18, r19
     f26:	34 2f       	mov	r19, r20
     f28:	44 27       	eor	r20, r20
     f2a:	58 5f       	subi	r21, 0xF8	; 248
     f2c:	f3 cf       	rjmp	.-26     	; 0xf14 <__addsf3x+0x38>
     f2e:	46 95       	lsr	r20
     f30:	37 95       	ror	r19
     f32:	27 95       	ror	r18
     f34:	a7 95       	ror	r26
     f36:	f0 40       	sbci	r31, 0x00	; 0
     f38:	53 95       	inc	r21
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <__addsf3x+0x52>
     f3c:	7e f4       	brtc	.+30     	; 0xf5c <__addsf3x+0x80>
     f3e:	1f 16       	cp	r1, r31
     f40:	ba 0b       	sbc	r27, r26
     f42:	62 0b       	sbc	r22, r18
     f44:	73 0b       	sbc	r23, r19
     f46:	84 0b       	sbc	r24, r20
     f48:	ba f0       	brmi	.+46     	; 0xf78 <__addsf3x+0x9c>
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	a1 f0       	breq	.+40     	; 0xf76 <__addsf3x+0x9a>
     f4e:	ff 0f       	add	r31, r31
     f50:	bb 1f       	adc	r27, r27
     f52:	66 1f       	adc	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	c2 f7       	brpl	.-16     	; 0xf4a <__addsf3x+0x6e>
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <__addsf3x+0x9c>
     f5c:	ba 0f       	add	r27, r26
     f5e:	62 1f       	adc	r22, r18
     f60:	73 1f       	adc	r23, r19
     f62:	84 1f       	adc	r24, r20
     f64:	48 f4       	brcc	.+18     	; 0xf78 <__addsf3x+0x9c>
     f66:	87 95       	ror	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	f7 95       	ror	r31
     f70:	9e 3f       	cpi	r25, 0xFE	; 254
     f72:	08 f0       	brcs	.+2      	; 0xf76 <__addsf3x+0x9a>
     f74:	b0 cf       	rjmp	.-160    	; 0xed6 <__addsf3+0x28>
     f76:	93 95       	inc	r25
     f78:	88 0f       	add	r24, r24
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__addsf3x+0xa2>
     f7c:	99 27       	eor	r25, r25
     f7e:	ee 0f       	add	r30, r30
     f80:	97 95       	ror	r25
     f82:	87 95       	ror	r24
     f84:	08 95       	ret

00000f86 <__divsf3>:
     f86:	0e 94 d7 07 	call	0xfae	; 0xfae <__divsf3x>
     f8a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_round>
     f8e:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_pscB>
     f92:	58 f0       	brcs	.+22     	; 0xfaa <__divsf3+0x24>
     f94:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_pscA>
     f98:	40 f0       	brcs	.+16     	; 0xfaa <__divsf3+0x24>
     f9a:	29 f4       	brne	.+10     	; 0xfa6 <__divsf3+0x20>
     f9c:	5f 3f       	cpi	r21, 0xFF	; 255
     f9e:	29 f0       	breq	.+10     	; 0xfaa <__divsf3+0x24>
     fa0:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
     fa4:	51 11       	cpse	r21, r1
     fa6:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
     faa:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_nan>

00000fae <__divsf3x>:
     fae:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_split3>
     fb2:	68 f3       	brcs	.-38     	; 0xf8e <__divsf3+0x8>

00000fb4 <__divsf3_pse>:
     fb4:	99 23       	and	r25, r25
     fb6:	b1 f3       	breq	.-20     	; 0xfa4 <__divsf3+0x1e>
     fb8:	55 23       	and	r21, r21
     fba:	91 f3       	breq	.-28     	; 0xfa0 <__divsf3+0x1a>
     fbc:	95 1b       	sub	r25, r21
     fbe:	55 0b       	sbc	r21, r21
     fc0:	bb 27       	eor	r27, r27
     fc2:	aa 27       	eor	r26, r26
     fc4:	62 17       	cp	r22, r18
     fc6:	73 07       	cpc	r23, r19
     fc8:	84 07       	cpc	r24, r20
     fca:	38 f0       	brcs	.+14     	; 0xfda <__divsf3_pse+0x26>
     fcc:	9f 5f       	subi	r25, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	44 1f       	adc	r20, r20
     fd6:	aa 1f       	adc	r26, r26
     fd8:	a9 f3       	breq	.-22     	; 0xfc4 <__divsf3_pse+0x10>
     fda:	35 d0       	rcall	.+106    	; 0x1046 <__divsf3_pse+0x92>
     fdc:	0e 2e       	mov	r0, r30
     fde:	3a f0       	brmi	.+14     	; 0xfee <__divsf3_pse+0x3a>
     fe0:	e0 e8       	ldi	r30, 0x80	; 128
     fe2:	32 d0       	rcall	.+100    	; 0x1048 <__divsf3_pse+0x94>
     fe4:	91 50       	subi	r25, 0x01	; 1
     fe6:	50 40       	sbci	r21, 0x00	; 0
     fe8:	e6 95       	lsr	r30
     fea:	00 1c       	adc	r0, r0
     fec:	ca f7       	brpl	.-14     	; 0xfe0 <__divsf3_pse+0x2c>
     fee:	2b d0       	rcall	.+86     	; 0x1046 <__divsf3_pse+0x92>
     ff0:	fe 2f       	mov	r31, r30
     ff2:	29 d0       	rcall	.+82     	; 0x1046 <__divsf3_pse+0x92>
     ff4:	66 0f       	add	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	bb 1f       	adc	r27, r27
     ffc:	26 17       	cp	r18, r22
     ffe:	37 07       	cpc	r19, r23
    1000:	48 07       	cpc	r20, r24
    1002:	ab 07       	cpc	r26, r27
    1004:	b0 e8       	ldi	r27, 0x80	; 128
    1006:	09 f0       	breq	.+2      	; 0x100a <__divsf3_pse+0x56>
    1008:	bb 0b       	sbc	r27, r27
    100a:	80 2d       	mov	r24, r0
    100c:	bf 01       	movw	r22, r30
    100e:	ff 27       	eor	r31, r31
    1010:	93 58       	subi	r25, 0x83	; 131
    1012:	5f 4f       	sbci	r21, 0xFF	; 255
    1014:	3a f0       	brmi	.+14     	; 0x1024 <__divsf3_pse+0x70>
    1016:	9e 3f       	cpi	r25, 0xFE	; 254
    1018:	51 05       	cpc	r21, r1
    101a:	78 f0       	brcs	.+30     	; 0x103a <__divsf3_pse+0x86>
    101c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
    1020:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
    1024:	5f 3f       	cpi	r21, 0xFF	; 255
    1026:	e4 f3       	brlt	.-8      	; 0x1020 <__divsf3_pse+0x6c>
    1028:	98 3e       	cpi	r25, 0xE8	; 232
    102a:	d4 f3       	brlt	.-12     	; 0x1020 <__divsf3_pse+0x6c>
    102c:	86 95       	lsr	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b7 95       	ror	r27
    1034:	f7 95       	ror	r31
    1036:	9f 5f       	subi	r25, 0xFF	; 255
    1038:	c9 f7       	brne	.-14     	; 0x102c <__divsf3_pse+0x78>
    103a:	88 0f       	add	r24, r24
    103c:	91 1d       	adc	r25, r1
    103e:	96 95       	lsr	r25
    1040:	87 95       	ror	r24
    1042:	97 f9       	bld	r25, 7
    1044:	08 95       	ret
    1046:	e1 e0       	ldi	r30, 0x01	; 1
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	bb 1f       	adc	r27, r27
    1050:	62 17       	cp	r22, r18
    1052:	73 07       	cpc	r23, r19
    1054:	84 07       	cpc	r24, r20
    1056:	ba 07       	cpc	r27, r26
    1058:	20 f0       	brcs	.+8      	; 0x1062 <__divsf3_pse+0xae>
    105a:	62 1b       	sub	r22, r18
    105c:	73 0b       	sbc	r23, r19
    105e:	84 0b       	sbc	r24, r20
    1060:	ba 0b       	sbc	r27, r26
    1062:	ee 1f       	adc	r30, r30
    1064:	88 f7       	brcc	.-30     	; 0x1048 <__divsf3_pse+0x94>
    1066:	e0 95       	com	r30
    1068:	08 95       	ret

0000106a <__fixsfsi>:
    106a:	0e 94 3c 08 	call	0x1078	; 0x1078 <__fixunssfsi>
    106e:	68 94       	set
    1070:	b1 11       	cpse	r27, r1
    1072:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
    1076:	08 95       	ret

00001078 <__fixunssfsi>:
    1078:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_splitA>
    107c:	88 f0       	brcs	.+34     	; 0x10a0 <__fixunssfsi+0x28>
    107e:	9f 57       	subi	r25, 0x7F	; 127
    1080:	98 f0       	brcs	.+38     	; 0x10a8 <__fixunssfsi+0x30>
    1082:	b9 2f       	mov	r27, r25
    1084:	99 27       	eor	r25, r25
    1086:	b7 51       	subi	r27, 0x17	; 23
    1088:	b0 f0       	brcs	.+44     	; 0x10b6 <__fixunssfsi+0x3e>
    108a:	e1 f0       	breq	.+56     	; 0x10c4 <__fixunssfsi+0x4c>
    108c:	66 0f       	add	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	1a f0       	brmi	.+6      	; 0x109c <__fixunssfsi+0x24>
    1096:	ba 95       	dec	r27
    1098:	c9 f7       	brne	.-14     	; 0x108c <__fixunssfsi+0x14>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <__fixunssfsi+0x4c>
    109c:	b1 30       	cpi	r27, 0x01	; 1
    109e:	91 f0       	breq	.+36     	; 0x10c4 <__fixunssfsi+0x4c>
    10a0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_zero>
    10a4:	b1 e0       	ldi	r27, 0x01	; 1
    10a6:	08 95       	ret
    10a8:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__fp_zero>
    10ac:	67 2f       	mov	r22, r23
    10ae:	78 2f       	mov	r23, r24
    10b0:	88 27       	eor	r24, r24
    10b2:	b8 5f       	subi	r27, 0xF8	; 248
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <__fixunssfsi+0x4c>
    10b6:	b9 3f       	cpi	r27, 0xF9	; 249
    10b8:	cc f3       	brlt	.-14     	; 0x10ac <__fixunssfsi+0x34>
    10ba:	86 95       	lsr	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b3 95       	inc	r27
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <__fixunssfsi+0x42>
    10c4:	3e f4       	brtc	.+14     	; 0x10d4 <__fixunssfsi+0x5c>
    10c6:	90 95       	com	r25
    10c8:	80 95       	com	r24
    10ca:	70 95       	com	r23
    10cc:	61 95       	neg	r22
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8f 4f       	sbci	r24, 0xFF	; 255
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	08 95       	ret

000010d6 <__floatunsisf>:
    10d6:	e8 94       	clt
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <__floatsisf+0x12>

000010da <__floatsisf>:
    10da:	97 fb       	bst	r25, 7
    10dc:	3e f4       	brtc	.+14     	; 0x10ec <__floatsisf+0x12>
    10de:	90 95       	com	r25
    10e0:	80 95       	com	r24
    10e2:	70 95       	com	r23
    10e4:	61 95       	neg	r22
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	99 23       	and	r25, r25
    10ee:	a9 f0       	breq	.+42     	; 0x111a <__floatsisf+0x40>
    10f0:	f9 2f       	mov	r31, r25
    10f2:	96 e9       	ldi	r25, 0x96	; 150
    10f4:	bb 27       	eor	r27, r27
    10f6:	93 95       	inc	r25
    10f8:	f6 95       	lsr	r31
    10fa:	87 95       	ror	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b7 95       	ror	r27
    1102:	f1 11       	cpse	r31, r1
    1104:	f8 cf       	rjmp	.-16     	; 0x10f6 <__floatsisf+0x1c>
    1106:	fa f4       	brpl	.+62     	; 0x1146 <__floatsisf+0x6c>
    1108:	bb 0f       	add	r27, r27
    110a:	11 f4       	brne	.+4      	; 0x1110 <__floatsisf+0x36>
    110c:	60 ff       	sbrs	r22, 0
    110e:	1b c0       	rjmp	.+54     	; 0x1146 <__floatsisf+0x6c>
    1110:	6f 5f       	subi	r22, 0xFF	; 255
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	8f 4f       	sbci	r24, 0xFF	; 255
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	16 c0       	rjmp	.+44     	; 0x1146 <__floatsisf+0x6c>
    111a:	88 23       	and	r24, r24
    111c:	11 f0       	breq	.+4      	; 0x1122 <__floatsisf+0x48>
    111e:	96 e9       	ldi	r25, 0x96	; 150
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <__floatsisf+0x6a>
    1122:	77 23       	and	r23, r23
    1124:	21 f0       	breq	.+8      	; 0x112e <__floatsisf+0x54>
    1126:	9e e8       	ldi	r25, 0x8E	; 142
    1128:	87 2f       	mov	r24, r23
    112a:	76 2f       	mov	r23, r22
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <__floatsisf+0x5e>
    112e:	66 23       	and	r22, r22
    1130:	71 f0       	breq	.+28     	; 0x114e <__floatsisf+0x74>
    1132:	96 e8       	ldi	r25, 0x86	; 134
    1134:	86 2f       	mov	r24, r22
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	2a f0       	brmi	.+10     	; 0x1146 <__floatsisf+0x6c>
    113c:	9a 95       	dec	r25
    113e:	66 0f       	add	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	da f7       	brpl	.-10     	; 0x113c <__floatsisf+0x62>
    1146:	88 0f       	add	r24, r24
    1148:	96 95       	lsr	r25
    114a:	87 95       	ror	r24
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret

00001150 <__fp_inf>:
    1150:	97 f9       	bld	r25, 7
    1152:	9f 67       	ori	r25, 0x7F	; 127
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	08 95       	ret

0000115c <__fp_nan>:
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	80 ec       	ldi	r24, 0xC0	; 192
    1160:	08 95       	ret

00001162 <__fp_pscA>:
    1162:	00 24       	eor	r0, r0
    1164:	0a 94       	dec	r0
    1166:	16 16       	cp	r1, r22
    1168:	17 06       	cpc	r1, r23
    116a:	18 06       	cpc	r1, r24
    116c:	09 06       	cpc	r0, r25
    116e:	08 95       	ret

00001170 <__fp_pscB>:
    1170:	00 24       	eor	r0, r0
    1172:	0a 94       	dec	r0
    1174:	12 16       	cp	r1, r18
    1176:	13 06       	cpc	r1, r19
    1178:	14 06       	cpc	r1, r20
    117a:	05 06       	cpc	r0, r21
    117c:	08 95       	ret

0000117e <__fp_round>:
    117e:	09 2e       	mov	r0, r25
    1180:	03 94       	inc	r0
    1182:	00 0c       	add	r0, r0
    1184:	11 f4       	brne	.+4      	; 0x118a <__fp_round+0xc>
    1186:	88 23       	and	r24, r24
    1188:	52 f0       	brmi	.+20     	; 0x119e <__fp_round+0x20>
    118a:	bb 0f       	add	r27, r27
    118c:	40 f4       	brcc	.+16     	; 0x119e <__fp_round+0x20>
    118e:	bf 2b       	or	r27, r31
    1190:	11 f4       	brne	.+4      	; 0x1196 <__fp_round+0x18>
    1192:	60 ff       	sbrs	r22, 0
    1194:	04 c0       	rjmp	.+8      	; 0x119e <__fp_round+0x20>
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	08 95       	ret

000011a0 <__fp_split3>:
    11a0:	57 fd       	sbrc	r21, 7
    11a2:	90 58       	subi	r25, 0x80	; 128
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	59 f0       	breq	.+22     	; 0x11c0 <__fp_splitA+0x10>
    11aa:	5f 3f       	cpi	r21, 0xFF	; 255
    11ac:	71 f0       	breq	.+28     	; 0x11ca <__fp_splitA+0x1a>
    11ae:	47 95       	ror	r20

000011b0 <__fp_splitA>:
    11b0:	88 0f       	add	r24, r24
    11b2:	97 fb       	bst	r25, 7
    11b4:	99 1f       	adc	r25, r25
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <__fp_splitA+0x20>
    11b8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ba:	79 f0       	breq	.+30     	; 0x11da <__fp_splitA+0x2a>
    11bc:	87 95       	ror	r24
    11be:	08 95       	ret
    11c0:	12 16       	cp	r1, r18
    11c2:	13 06       	cpc	r1, r19
    11c4:	14 06       	cpc	r1, r20
    11c6:	55 1f       	adc	r21, r21
    11c8:	f2 cf       	rjmp	.-28     	; 0x11ae <__fp_split3+0xe>
    11ca:	46 95       	lsr	r20
    11cc:	f1 df       	rcall	.-30     	; 0x11b0 <__fp_splitA>
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <__fp_splitA+0x30>
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	f1 cf       	rjmp	.-30     	; 0x11bc <__fp_splitA+0xc>
    11da:	86 95       	lsr	r24
    11dc:	71 05       	cpc	r23, r1
    11de:	61 05       	cpc	r22, r1
    11e0:	08 94       	sec
    11e2:	08 95       	ret

000011e4 <__fp_zero>:
    11e4:	e8 94       	clt

000011e6 <__fp_szero>:
    11e6:	bb 27       	eor	r27, r27
    11e8:	66 27       	eor	r22, r22
    11ea:	77 27       	eor	r23, r23
    11ec:	cb 01       	movw	r24, r22
    11ee:	97 f9       	bld	r25, 7
    11f0:	08 95       	ret

000011f2 <__mulsf3>:
    11f2:	0e 94 0c 09 	call	0x1218	; 0x1218 <__mulsf3x>
    11f6:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_round>
    11fa:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_pscA>
    11fe:	38 f0       	brcs	.+14     	; 0x120e <__mulsf3+0x1c>
    1200:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_pscB>
    1204:	20 f0       	brcs	.+8      	; 0x120e <__mulsf3+0x1c>
    1206:	95 23       	and	r25, r21
    1208:	11 f0       	breq	.+4      	; 0x120e <__mulsf3+0x1c>
    120a:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
    120e:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_nan>
    1212:	11 24       	eor	r1, r1
    1214:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>

00001218 <__mulsf3x>:
    1218:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_split3>
    121c:	70 f3       	brcs	.-36     	; 0x11fa <__mulsf3+0x8>

0000121e <__mulsf3_pse>:
    121e:	95 9f       	mul	r25, r21
    1220:	c1 f3       	breq	.-16     	; 0x1212 <__mulsf3+0x20>
    1222:	95 0f       	add	r25, r21
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	55 1f       	adc	r21, r21
    1228:	62 9f       	mul	r22, r18
    122a:	f0 01       	movw	r30, r0
    122c:	72 9f       	mul	r23, r18
    122e:	bb 27       	eor	r27, r27
    1230:	f0 0d       	add	r31, r0
    1232:	b1 1d       	adc	r27, r1
    1234:	63 9f       	mul	r22, r19
    1236:	aa 27       	eor	r26, r26
    1238:	f0 0d       	add	r31, r0
    123a:	b1 1d       	adc	r27, r1
    123c:	aa 1f       	adc	r26, r26
    123e:	64 9f       	mul	r22, r20
    1240:	66 27       	eor	r22, r22
    1242:	b0 0d       	add	r27, r0
    1244:	a1 1d       	adc	r26, r1
    1246:	66 1f       	adc	r22, r22
    1248:	82 9f       	mul	r24, r18
    124a:	22 27       	eor	r18, r18
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	62 1f       	adc	r22, r18
    1252:	73 9f       	mul	r23, r19
    1254:	b0 0d       	add	r27, r0
    1256:	a1 1d       	adc	r26, r1
    1258:	62 1f       	adc	r22, r18
    125a:	83 9f       	mul	r24, r19
    125c:	a0 0d       	add	r26, r0
    125e:	61 1d       	adc	r22, r1
    1260:	22 1f       	adc	r18, r18
    1262:	74 9f       	mul	r23, r20
    1264:	33 27       	eor	r19, r19
    1266:	a0 0d       	add	r26, r0
    1268:	61 1d       	adc	r22, r1
    126a:	23 1f       	adc	r18, r19
    126c:	84 9f       	mul	r24, r20
    126e:	60 0d       	add	r22, r0
    1270:	21 1d       	adc	r18, r1
    1272:	82 2f       	mov	r24, r18
    1274:	76 2f       	mov	r23, r22
    1276:	6a 2f       	mov	r22, r26
    1278:	11 24       	eor	r1, r1
    127a:	9f 57       	subi	r25, 0x7F	; 127
    127c:	50 40       	sbci	r21, 0x00	; 0
    127e:	9a f0       	brmi	.+38     	; 0x12a6 <__mulsf3_pse+0x88>
    1280:	f1 f0       	breq	.+60     	; 0x12be <__mulsf3_pse+0xa0>
    1282:	88 23       	and	r24, r24
    1284:	4a f0       	brmi	.+18     	; 0x1298 <__mulsf3_pse+0x7a>
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	bb 1f       	adc	r27, r27
    128c:	66 1f       	adc	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	50 40       	sbci	r21, 0x00	; 0
    1296:	a9 f7       	brne	.-22     	; 0x1282 <__mulsf3_pse+0x64>
    1298:	9e 3f       	cpi	r25, 0xFE	; 254
    129a:	51 05       	cpc	r21, r1
    129c:	80 f0       	brcs	.+32     	; 0x12be <__mulsf3_pse+0xa0>
    129e:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
    12a2:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
    12a6:	5f 3f       	cpi	r21, 0xFF	; 255
    12a8:	e4 f3       	brlt	.-8      	; 0x12a2 <__mulsf3_pse+0x84>
    12aa:	98 3e       	cpi	r25, 0xE8	; 232
    12ac:	d4 f3       	brlt	.-12     	; 0x12a2 <__mulsf3_pse+0x84>
    12ae:	86 95       	lsr	r24
    12b0:	77 95       	ror	r23
    12b2:	67 95       	ror	r22
    12b4:	b7 95       	ror	r27
    12b6:	f7 95       	ror	r31
    12b8:	e7 95       	ror	r30
    12ba:	9f 5f       	subi	r25, 0xFF	; 255
    12bc:	c1 f7       	brne	.-16     	; 0x12ae <__mulsf3_pse+0x90>
    12be:	fe 2b       	or	r31, r30
    12c0:	88 0f       	add	r24, r24
    12c2:	91 1d       	adc	r25, r1
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret

000012cc <round>:
    12cc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_splitA>
    12d0:	e8 f0       	brcs	.+58     	; 0x130c <round+0x40>
    12d2:	9e 37       	cpi	r25, 0x7E	; 126
    12d4:	e8 f0       	brcs	.+58     	; 0x1310 <round+0x44>
    12d6:	96 39       	cpi	r25, 0x96	; 150
    12d8:	b8 f4       	brcc	.+46     	; 0x1308 <round+0x3c>
    12da:	9e 38       	cpi	r25, 0x8E	; 142
    12dc:	48 f4       	brcc	.+18     	; 0x12f0 <round+0x24>
    12de:	67 2f       	mov	r22, r23
    12e0:	78 2f       	mov	r23, r24
    12e2:	88 27       	eor	r24, r24
    12e4:	98 5f       	subi	r25, 0xF8	; 248
    12e6:	f9 cf       	rjmp	.-14     	; 0x12da <round+0xe>
    12e8:	86 95       	lsr	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	93 95       	inc	r25
    12f0:	95 39       	cpi	r25, 0x95	; 149
    12f2:	d0 f3       	brcs	.-12     	; 0x12e8 <round+0x1c>
    12f4:	b6 2f       	mov	r27, r22
    12f6:	b1 70       	andi	r27, 0x01	; 1
    12f8:	6b 0f       	add	r22, r27
    12fa:	71 1d       	adc	r23, r1
    12fc:	81 1d       	adc	r24, r1
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <round+0x3c>
    1300:	87 95       	ror	r24
    1302:	77 95       	ror	r23
    1304:	67 95       	ror	r22
    1306:	93 95       	inc	r25
    1308:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_mintl>
    130c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_mpack>
    1310:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>

00001314 <__fp_mintl>:
    1314:	88 23       	and	r24, r24
    1316:	71 f4       	brne	.+28     	; 0x1334 <__fp_mintl+0x20>
    1318:	77 23       	and	r23, r23
    131a:	21 f0       	breq	.+8      	; 0x1324 <__fp_mintl+0x10>
    131c:	98 50       	subi	r25, 0x08	; 8
    131e:	87 2b       	or	r24, r23
    1320:	76 2f       	mov	r23, r22
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <__fp_mintl+0x1e>
    1324:	66 23       	and	r22, r22
    1326:	11 f4       	brne	.+4      	; 0x132c <__fp_mintl+0x18>
    1328:	99 27       	eor	r25, r25
    132a:	0d c0       	rjmp	.+26     	; 0x1346 <__fp_mintl+0x32>
    132c:	90 51       	subi	r25, 0x10	; 16
    132e:	86 2b       	or	r24, r22
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	2a f0       	brmi	.+10     	; 0x1340 <__fp_mintl+0x2c>
    1336:	9a 95       	dec	r25
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	da f7       	brpl	.-10     	; 0x1336 <__fp_mintl+0x22>
    1340:	88 0f       	add	r24, r24
    1342:	96 95       	lsr	r25
    1344:	87 95       	ror	r24
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret

0000134a <__fp_mpack>:
    134a:	9f 3f       	cpi	r25, 0xFF	; 255
    134c:	31 f0       	breq	.+12     	; 0x135a <__fp_mpack_finite+0xc>

0000134e <__fp_mpack_finite>:
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	20 f4       	brcc	.+8      	; 0x135a <__fp_mpack_finite+0xc>
    1352:	87 95       	ror	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	b7 95       	ror	r27
    135a:	88 0f       	add	r24, r24
    135c:	91 1d       	adc	r25, r1
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret

00001366 <__divmodhi4>:
    1366:	97 fb       	bst	r25, 7
    1368:	07 2e       	mov	r0, r23
    136a:	16 f4       	brtc	.+4      	; 0x1370 <__divmodhi4+0xa>
    136c:	00 94       	com	r0
    136e:	07 d0       	rcall	.+14     	; 0x137e <__divmodhi4_neg1>
    1370:	77 fd       	sbrc	r23, 7
    1372:	09 d0       	rcall	.+18     	; 0x1386 <__divmodhi4_neg2>
    1374:	0e 94 c7 09 	call	0x138e	; 0x138e <__udivmodhi4>
    1378:	07 fc       	sbrc	r0, 7
    137a:	05 d0       	rcall	.+10     	; 0x1386 <__divmodhi4_neg2>
    137c:	3e f4       	brtc	.+14     	; 0x138c <__divmodhi4_exit>

0000137e <__divmodhi4_neg1>:
    137e:	90 95       	com	r25
    1380:	81 95       	neg	r24
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	08 95       	ret

00001386 <__divmodhi4_neg2>:
    1386:	70 95       	com	r23
    1388:	61 95       	neg	r22
    138a:	7f 4f       	sbci	r23, 0xFF	; 255

0000138c <__divmodhi4_exit>:
    138c:	08 95       	ret

0000138e <__udivmodhi4>:
    138e:	aa 1b       	sub	r26, r26
    1390:	bb 1b       	sub	r27, r27
    1392:	51 e1       	ldi	r21, 0x11	; 17
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <__udivmodhi4_ep>

00001396 <__udivmodhi4_loop>:
    1396:	aa 1f       	adc	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	a6 17       	cp	r26, r22
    139c:	b7 07       	cpc	r27, r23
    139e:	10 f0       	brcs	.+4      	; 0x13a4 <__udivmodhi4_ep>
    13a0:	a6 1b       	sub	r26, r22
    13a2:	b7 0b       	sbc	r27, r23

000013a4 <__udivmodhi4_ep>:
    13a4:	88 1f       	adc	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	5a 95       	dec	r21
    13aa:	a9 f7       	brne	.-22     	; 0x1396 <__udivmodhi4_loop>
    13ac:	80 95       	com	r24
    13ae:	90 95       	com	r25
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	08 95       	ret

000013b6 <dtostrf>:
    13b6:	ef 92       	push	r14
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	e8 01       	movw	r28, r16
    13c2:	47 fd       	sbrc	r20, 7
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <dtostrf+0x14>
    13c6:	34 e0       	ldi	r19, 0x04	; 4
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <dtostrf+0x16>
    13ca:	34 e1       	ldi	r19, 0x14	; 20
    13cc:	04 2e       	mov	r0, r20
    13ce:	00 0c       	add	r0, r0
    13d0:	55 0b       	sbc	r21, r21
    13d2:	57 ff       	sbrs	r21, 7
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <dtostrf+0x26>
    13d6:	51 95       	neg	r21
    13d8:	41 95       	neg	r20
    13da:	51 09       	sbc	r21, r1
    13dc:	e3 2e       	mov	r14, r19
    13de:	02 2f       	mov	r16, r18
    13e0:	24 2f       	mov	r18, r20
    13e2:	ae 01       	movw	r20, r28
    13e4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <dtoa_prf>
    13e8:	ce 01       	movw	r24, r28
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ef 90       	pop	r14
    13f4:	08 95       	ret

000013f6 <itoa>:
    13f6:	45 32       	cpi	r20, 0x25	; 37
    13f8:	51 05       	cpc	r21, r1
    13fa:	20 f4       	brcc	.+8      	; 0x1404 <itoa+0xe>
    13fc:	42 30       	cpi	r20, 0x02	; 2
    13fe:	10 f0       	brcs	.+4      	; 0x1404 <itoa+0xe>
    1400:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__itoa_ncheck>
    1404:	fb 01       	movw	r30, r22
    1406:	10 82       	st	Z, r1
    1408:	cb 01       	movw	r24, r22
    140a:	08 95       	ret

0000140c <__itoa_ncheck>:
    140c:	bb 27       	eor	r27, r27
    140e:	4a 30       	cpi	r20, 0x0A	; 10
    1410:	31 f4       	brne	.+12     	; 0x141e <__itoa_ncheck+0x12>
    1412:	99 23       	and	r25, r25
    1414:	22 f4       	brpl	.+8      	; 0x141e <__itoa_ncheck+0x12>
    1416:	bd e2       	ldi	r27, 0x2D	; 45
    1418:	90 95       	com	r25
    141a:	81 95       	neg	r24
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__utoa_common>

00001422 <__utoa_ncheck>:
    1422:	bb 27       	eor	r27, r27

00001424 <__utoa_common>:
    1424:	fb 01       	movw	r30, r22
    1426:	55 27       	eor	r21, r21
    1428:	aa 27       	eor	r26, r26
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	aa 1f       	adc	r26, r26
    1430:	a4 17       	cp	r26, r20
    1432:	10 f0       	brcs	.+4      	; 0x1438 <__utoa_common+0x14>
    1434:	a4 1b       	sub	r26, r20
    1436:	83 95       	inc	r24
    1438:	50 51       	subi	r21, 0x10	; 16
    143a:	b9 f7       	brne	.-18     	; 0x142a <__utoa_common+0x6>
    143c:	a0 5d       	subi	r26, 0xD0	; 208
    143e:	aa 33       	cpi	r26, 0x3A	; 58
    1440:	08 f0       	brcs	.+2      	; 0x1444 <__utoa_common+0x20>
    1442:	a9 5d       	subi	r26, 0xD9	; 217
    1444:	a1 93       	st	Z+, r26
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	79 f7       	brne	.-34     	; 0x1428 <__utoa_common+0x4>
    144a:	b1 11       	cpse	r27, r1
    144c:	b1 93       	st	Z+, r27
    144e:	11 92       	st	Z+, r1
    1450:	cb 01       	movw	r24, r22
    1452:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <strrev>

00001456 <puts>:
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <__iob+0x2>
    1462:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <__iob+0x3>
    1466:	23 81       	ldd	r18, Z+3	; 0x03
    1468:	21 ff       	sbrs	r18, 1
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <puts+0x4c>
    146c:	8c 01       	movw	r16, r24
    146e:	d0 e0       	ldi	r29, 0x00	; 0
    1470:	c0 e0       	ldi	r28, 0x00	; 0
    1472:	f8 01       	movw	r30, r16
    1474:	81 91       	ld	r24, Z+
    1476:	8f 01       	movw	r16, r30
    1478:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <__iob+0x2>
    147c:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <__iob+0x3>
    1480:	db 01       	movw	r26, r22
    1482:	18 96       	adiw	r26, 0x08	; 8
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	19 97       	sbiw	r26, 0x09	; 9
    148a:	88 23       	and	r24, r24
    148c:	31 f0       	breq	.+12     	; 0x149a <puts+0x44>
    148e:	09 95       	icall
    1490:	89 2b       	or	r24, r25
    1492:	79 f3       	breq	.-34     	; 0x1472 <puts+0x1c>
    1494:	df ef       	ldi	r29, 0xFF	; 255
    1496:	cf ef       	ldi	r28, 0xFF	; 255
    1498:	ec cf       	rjmp	.-40     	; 0x1472 <puts+0x1c>
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	09 95       	icall
    149e:	89 2b       	or	r24, r25
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <puts+0x52>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <puts+0x56>
    14a8:	8d 2f       	mov	r24, r29
    14aa:	9c 2f       	mov	r25, r28
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <dtoa_prf>:
    14b6:	a9 e0       	ldi	r26, 0x09	; 9
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e6       	ldi	r30, 0x61	; 97
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__prologue_saves__+0xc>
    14c2:	6a 01       	movw	r12, r20
    14c4:	12 2f       	mov	r17, r18
    14c6:	b0 2e       	mov	r11, r16
    14c8:	2b e3       	ldi	r18, 0x3B	; 59
    14ca:	20 17       	cp	r18, r16
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <dtoa_prf+0x20>
    14ce:	ff 24       	eor	r15, r15
    14d0:	f3 94       	inc	r15
    14d2:	f0 0e       	add	r15, r16
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <dtoa_prf+0x24>
    14d6:	2c e3       	ldi	r18, 0x3C	; 60
    14d8:	f2 2e       	mov	r15, r18
    14da:	0f 2d       	mov	r16, r15
    14dc:	27 e0       	ldi	r18, 0x07	; 7
    14de:	ae 01       	movw	r20, r28
    14e0:	4f 5f       	subi	r20, 0xFF	; 255
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	0e 94 b5 0b 	call	0x176a	; 0x176a <__ftoa_engine>
    14e8:	bc 01       	movw	r22, r24
    14ea:	49 81       	ldd	r20, Y+1	; 0x01
    14ec:	84 2f       	mov	r24, r20
    14ee:	89 70       	andi	r24, 0x09	; 9
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	31 f0       	breq	.+12     	; 0x1500 <dtoa_prf+0x4a>
    14f4:	e1 fc       	sbrc	r14, 1
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <dtoa_prf+0x4e>
    14f8:	e0 fe       	sbrs	r14, 0
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <dtoa_prf+0x52>
    14fc:	90 e2       	ldi	r25, 0x20	; 32
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <dtoa_prf+0x54>
    1500:	9d e2       	ldi	r25, 0x2D	; 45
    1502:	03 c0       	rjmp	.+6      	; 0x150a <dtoa_prf+0x54>
    1504:	9b e2       	ldi	r25, 0x2B	; 43
    1506:	01 c0       	rjmp	.+2      	; 0x150a <dtoa_prf+0x54>
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	5e 2d       	mov	r21, r14
    150c:	50 71       	andi	r21, 0x10	; 16
    150e:	43 ff       	sbrs	r20, 3
    1510:	3c c0       	rjmp	.+120    	; 0x158a <dtoa_prf+0xd4>
    1512:	91 11       	cpse	r25, r1
    1514:	02 c0       	rjmp	.+4      	; 0x151a <dtoa_prf+0x64>
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	01 c0       	rjmp	.+2      	; 0x151c <dtoa_prf+0x66>
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	81 17       	cp	r24, r17
    151e:	18 f4       	brcc	.+6      	; 0x1526 <dtoa_prf+0x70>
    1520:	21 2f       	mov	r18, r17
    1522:	28 1b       	sub	r18, r24
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <dtoa_prf+0x72>
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	51 11       	cpse	r21, r1
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <dtoa_prf+0x8c>
    152c:	f6 01       	movw	r30, r12
    152e:	82 2f       	mov	r24, r18
    1530:	30 e2       	ldi	r19, 0x20	; 32
    1532:	88 23       	and	r24, r24
    1534:	19 f0       	breq	.+6      	; 0x153c <dtoa_prf+0x86>
    1536:	31 93       	st	Z+, r19
    1538:	81 50       	subi	r24, 0x01	; 1
    153a:	fb cf       	rjmp	.-10     	; 0x1532 <dtoa_prf+0x7c>
    153c:	c2 0e       	add	r12, r18
    153e:	d1 1c       	adc	r13, r1
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	99 23       	and	r25, r25
    1544:	29 f0       	breq	.+10     	; 0x1550 <dtoa_prf+0x9a>
    1546:	d6 01       	movw	r26, r12
    1548:	9c 93       	st	X, r25
    154a:	f6 01       	movw	r30, r12
    154c:	31 96       	adiw	r30, 0x01	; 1
    154e:	6f 01       	movw	r12, r30
    1550:	c6 01       	movw	r24, r12
    1552:	03 96       	adiw	r24, 0x03	; 3
    1554:	e2 fe       	sbrs	r14, 2
    1556:	0a c0       	rjmp	.+20     	; 0x156c <dtoa_prf+0xb6>
    1558:	3e e4       	ldi	r19, 0x4E	; 78
    155a:	d6 01       	movw	r26, r12
    155c:	3c 93       	st	X, r19
    155e:	41 e4       	ldi	r20, 0x41	; 65
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	4c 93       	st	X, r20
    1564:	11 97       	sbiw	r26, 0x01	; 1
    1566:	12 96       	adiw	r26, 0x02	; 2
    1568:	3c 93       	st	X, r19
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <dtoa_prf+0xc2>
    156c:	3e e6       	ldi	r19, 0x6E	; 110
    156e:	f6 01       	movw	r30, r12
    1570:	30 83       	st	Z, r19
    1572:	41 e6       	ldi	r20, 0x61	; 97
    1574:	41 83       	std	Z+1, r20	; 0x01
    1576:	32 83       	std	Z+2, r19	; 0x02
    1578:	fc 01       	movw	r30, r24
    157a:	32 2f       	mov	r19, r18
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	33 23       	and	r19, r19
    1580:	09 f4       	brne	.+2      	; 0x1584 <dtoa_prf+0xce>
    1582:	42 c0       	rjmp	.+132    	; 0x1608 <dtoa_prf+0x152>
    1584:	41 93       	st	Z+, r20
    1586:	31 50       	subi	r19, 0x01	; 1
    1588:	fa cf       	rjmp	.-12     	; 0x157e <dtoa_prf+0xc8>
    158a:	42 ff       	sbrs	r20, 2
    158c:	44 c0       	rjmp	.+136    	; 0x1616 <dtoa_prf+0x160>
    158e:	91 11       	cpse	r25, r1
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <dtoa_prf+0xe0>
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <dtoa_prf+0xe2>
    1596:	84 e0       	ldi	r24, 0x04	; 4
    1598:	81 17       	cp	r24, r17
    159a:	18 f4       	brcc	.+6      	; 0x15a2 <dtoa_prf+0xec>
    159c:	21 2f       	mov	r18, r17
    159e:	28 1b       	sub	r18, r24
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <dtoa_prf+0xee>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	51 11       	cpse	r21, r1
    15a6:	0b c0       	rjmp	.+22     	; 0x15be <dtoa_prf+0x108>
    15a8:	f6 01       	movw	r30, r12
    15aa:	82 2f       	mov	r24, r18
    15ac:	30 e2       	ldi	r19, 0x20	; 32
    15ae:	88 23       	and	r24, r24
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <dtoa_prf+0x102>
    15b2:	31 93       	st	Z+, r19
    15b4:	81 50       	subi	r24, 0x01	; 1
    15b6:	fb cf       	rjmp	.-10     	; 0x15ae <dtoa_prf+0xf8>
    15b8:	c2 0e       	add	r12, r18
    15ba:	d1 1c       	adc	r13, r1
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	99 23       	and	r25, r25
    15c0:	29 f0       	breq	.+10     	; 0x15cc <dtoa_prf+0x116>
    15c2:	d6 01       	movw	r26, r12
    15c4:	9c 93       	st	X, r25
    15c6:	f6 01       	movw	r30, r12
    15c8:	31 96       	adiw	r30, 0x01	; 1
    15ca:	6f 01       	movw	r12, r30
    15cc:	c6 01       	movw	r24, r12
    15ce:	03 96       	adiw	r24, 0x03	; 3
    15d0:	e2 fe       	sbrs	r14, 2
    15d2:	0b c0       	rjmp	.+22     	; 0x15ea <dtoa_prf+0x134>
    15d4:	39 e4       	ldi	r19, 0x49	; 73
    15d6:	d6 01       	movw	r26, r12
    15d8:	3c 93       	st	X, r19
    15da:	3e e4       	ldi	r19, 0x4E	; 78
    15dc:	11 96       	adiw	r26, 0x01	; 1
    15de:	3c 93       	st	X, r19
    15e0:	11 97       	sbiw	r26, 0x01	; 1
    15e2:	36 e4       	ldi	r19, 0x46	; 70
    15e4:	12 96       	adiw	r26, 0x02	; 2
    15e6:	3c 93       	st	X, r19
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <dtoa_prf+0x142>
    15ea:	39 e6       	ldi	r19, 0x69	; 105
    15ec:	f6 01       	movw	r30, r12
    15ee:	30 83       	st	Z, r19
    15f0:	3e e6       	ldi	r19, 0x6E	; 110
    15f2:	31 83       	std	Z+1, r19	; 0x01
    15f4:	36 e6       	ldi	r19, 0x66	; 102
    15f6:	32 83       	std	Z+2, r19	; 0x02
    15f8:	fc 01       	movw	r30, r24
    15fa:	32 2f       	mov	r19, r18
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	33 23       	and	r19, r19
    1600:	19 f0       	breq	.+6      	; 0x1608 <dtoa_prf+0x152>
    1602:	41 93       	st	Z+, r20
    1604:	31 50       	subi	r19, 0x01	; 1
    1606:	fb cf       	rjmp	.-10     	; 0x15fe <dtoa_prf+0x148>
    1608:	fc 01       	movw	r30, r24
    160a:	e2 0f       	add	r30, r18
    160c:	f1 1d       	adc	r31, r1
    160e:	10 82       	st	Z, r1
    1610:	8e ef       	ldi	r24, 0xFE	; 254
    1612:	9f ef       	ldi	r25, 0xFF	; 255
    1614:	a6 c0       	rjmp	.+332    	; 0x1762 <dtoa_prf+0x2ac>
    1616:	21 e0       	ldi	r18, 0x01	; 1
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	91 11       	cpse	r25, r1
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <dtoa_prf+0x16c>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	16 16       	cp	r1, r22
    1624:	17 06       	cpc	r1, r23
    1626:	1c f4       	brge	.+6      	; 0x162e <dtoa_prf+0x178>
    1628:	fb 01       	movw	r30, r22
    162a:	31 96       	adiw	r30, 0x01	; 1
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <dtoa_prf+0x17c>
    162e:	e1 e0       	ldi	r30, 0x01	; 1
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	2e 0f       	add	r18, r30
    1634:	3f 1f       	adc	r19, r31
    1636:	bb 20       	and	r11, r11
    1638:	21 f0       	breq	.+8      	; 0x1642 <dtoa_prf+0x18c>
    163a:	eb 2d       	mov	r30, r11
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	31 96       	adiw	r30, 0x01	; 1
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <dtoa_prf+0x190>
    1642:	e0 e0       	ldi	r30, 0x00	; 0
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	2e 0f       	add	r18, r30
    1648:	3f 1f       	adc	r19, r31
    164a:	e1 2f       	mov	r30, r17
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	2e 17       	cp	r18, r30
    1650:	3f 07       	cpc	r19, r31
    1652:	1c f4       	brge	.+6      	; 0x165a <dtoa_prf+0x1a4>
    1654:	12 1b       	sub	r17, r18
    1656:	21 2f       	mov	r18, r17
    1658:	01 c0       	rjmp	.+2      	; 0x165c <dtoa_prf+0x1a6>
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	8e 2d       	mov	r24, r14
    165e:	88 71       	andi	r24, 0x18	; 24
    1660:	59 f4       	brne	.+22     	; 0x1678 <dtoa_prf+0x1c2>
    1662:	f6 01       	movw	r30, r12
    1664:	82 2f       	mov	r24, r18
    1666:	30 e2       	ldi	r19, 0x20	; 32
    1668:	88 23       	and	r24, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <dtoa_prf+0x1bc>
    166c:	31 93       	st	Z+, r19
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	fb cf       	rjmp	.-10     	; 0x1668 <dtoa_prf+0x1b2>
    1672:	c2 0e       	add	r12, r18
    1674:	d1 1c       	adc	r13, r1
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	99 23       	and	r25, r25
    167a:	29 f0       	breq	.+10     	; 0x1686 <dtoa_prf+0x1d0>
    167c:	d6 01       	movw	r26, r12
    167e:	9c 93       	st	X, r25
    1680:	f6 01       	movw	r30, r12
    1682:	31 96       	adiw	r30, 0x01	; 1
    1684:	6f 01       	movw	r12, r30
    1686:	51 11       	cpse	r21, r1
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <dtoa_prf+0x1ea>
    168a:	f6 01       	movw	r30, r12
    168c:	82 2f       	mov	r24, r18
    168e:	90 e3       	ldi	r25, 0x30	; 48
    1690:	88 23       	and	r24, r24
    1692:	19 f0       	breq	.+6      	; 0x169a <dtoa_prf+0x1e4>
    1694:	91 93       	st	Z+, r25
    1696:	81 50       	subi	r24, 0x01	; 1
    1698:	fb cf       	rjmp	.-10     	; 0x1690 <dtoa_prf+0x1da>
    169a:	c2 0e       	add	r12, r18
    169c:	d1 1c       	adc	r13, r1
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	0f 2d       	mov	r16, r15
    16a2:	06 0f       	add	r16, r22
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	34 2f       	mov	r19, r20
    16a8:	30 71       	andi	r19, 0x10	; 16
    16aa:	44 ff       	sbrs	r20, 4
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <dtoa_prf+0x1fe>
    16ae:	91 33       	cpi	r25, 0x31	; 49
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <dtoa_prf+0x1fe>
    16b2:	01 50       	subi	r16, 0x01	; 1
    16b4:	10 16       	cp	r1, r16
    16b6:	24 f4       	brge	.+8      	; 0x16c0 <dtoa_prf+0x20a>
    16b8:	09 30       	cpi	r16, 0x09	; 9
    16ba:	18 f0       	brcs	.+6      	; 0x16c2 <dtoa_prf+0x20c>
    16bc:	08 e0       	ldi	r16, 0x08	; 8
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <dtoa_prf+0x20c>
    16c0:	01 e0       	ldi	r16, 0x01	; 1
    16c2:	ab 01       	movw	r20, r22
    16c4:	77 ff       	sbrs	r23, 7
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <dtoa_prf+0x216>
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	fb 01       	movw	r30, r22
    16ce:	e4 1b       	sub	r30, r20
    16d0:	f5 0b       	sbc	r31, r21
    16d2:	a1 e0       	ldi	r26, 0x01	; 1
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ac 0f       	add	r26, r28
    16d8:	bd 1f       	adc	r27, r29
    16da:	ea 0f       	add	r30, r26
    16dc:	fb 1f       	adc	r31, r27
    16de:	8e e2       	ldi	r24, 0x2E	; 46
    16e0:	a8 2e       	mov	r10, r24
    16e2:	4b 01       	movw	r8, r22
    16e4:	80 1a       	sub	r8, r16
    16e6:	91 08       	sbc	r9, r1
    16e8:	0b 2d       	mov	r16, r11
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	11 95       	neg	r17
    16ee:	01 95       	neg	r16
    16f0:	11 09       	sbc	r17, r1
    16f2:	4f 3f       	cpi	r20, 0xFF	; 255
    16f4:	bf ef       	ldi	r27, 0xFF	; 255
    16f6:	5b 07       	cpc	r21, r27
    16f8:	21 f4       	brne	.+8      	; 0x1702 <dtoa_prf+0x24c>
    16fa:	d6 01       	movw	r26, r12
    16fc:	ac 92       	st	X, r10
    16fe:	11 96       	adiw	r26, 0x01	; 1
    1700:	6d 01       	movw	r12, r26
    1702:	64 17       	cp	r22, r20
    1704:	75 07       	cpc	r23, r21
    1706:	2c f0       	brlt	.+10     	; 0x1712 <dtoa_prf+0x25c>
    1708:	84 16       	cp	r8, r20
    170a:	95 06       	cpc	r9, r21
    170c:	14 f4       	brge	.+4      	; 0x1712 <dtoa_prf+0x25c>
    170e:	81 81       	ldd	r24, Z+1	; 0x01
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <dtoa_prf+0x25e>
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	41 50       	subi	r20, 0x01	; 1
    1716:	51 09       	sbc	r21, r1
    1718:	31 96       	adiw	r30, 0x01	; 1
    171a:	d6 01       	movw	r26, r12
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	7d 01       	movw	r14, r26
    1720:	40 17       	cp	r20, r16
    1722:	51 07       	cpc	r21, r17
    1724:	24 f0       	brlt	.+8      	; 0x172e <dtoa_prf+0x278>
    1726:	d6 01       	movw	r26, r12
    1728:	8c 93       	st	X, r24
    172a:	67 01       	movw	r12, r14
    172c:	e2 cf       	rjmp	.-60     	; 0x16f2 <dtoa_prf+0x23c>
    172e:	64 17       	cp	r22, r20
    1730:	75 07       	cpc	r23, r21
    1732:	39 f4       	brne	.+14     	; 0x1742 <dtoa_prf+0x28c>
    1734:	96 33       	cpi	r25, 0x36	; 54
    1736:	20 f4       	brcc	.+8      	; 0x1740 <dtoa_prf+0x28a>
    1738:	95 33       	cpi	r25, 0x35	; 53
    173a:	19 f4       	brne	.+6      	; 0x1742 <dtoa_prf+0x28c>
    173c:	31 11       	cpse	r19, r1
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <dtoa_prf+0x28c>
    1740:	81 e3       	ldi	r24, 0x31	; 49
    1742:	f6 01       	movw	r30, r12
    1744:	80 83       	st	Z, r24
    1746:	f7 01       	movw	r30, r14
    1748:	82 2f       	mov	r24, r18
    174a:	90 e2       	ldi	r25, 0x20	; 32
    174c:	88 23       	and	r24, r24
    174e:	19 f0       	breq	.+6      	; 0x1756 <dtoa_prf+0x2a0>
    1750:	91 93       	st	Z+, r25
    1752:	81 50       	subi	r24, 0x01	; 1
    1754:	fb cf       	rjmp	.-10     	; 0x174c <dtoa_prf+0x296>
    1756:	f7 01       	movw	r30, r14
    1758:	e2 0f       	add	r30, r18
    175a:	f1 1d       	adc	r31, r1
    175c:	10 82       	st	Z, r1
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	29 96       	adiw	r28, 0x09	; 9
    1764:	ec e0       	ldi	r30, 0x0C	; 12
    1766:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__epilogue_restores__+0xc>

0000176a <__ftoa_engine>:
    176a:	28 30       	cpi	r18, 0x08	; 8
    176c:	08 f0       	brcs	.+2      	; 0x1770 <__ftoa_engine+0x6>
    176e:	27 e0       	ldi	r18, 0x07	; 7
    1770:	33 27       	eor	r19, r19
    1772:	da 01       	movw	r26, r20
    1774:	99 0f       	add	r25, r25
    1776:	31 1d       	adc	r19, r1
    1778:	87 fd       	sbrc	r24, 7
    177a:	91 60       	ori	r25, 0x01	; 1
    177c:	00 96       	adiw	r24, 0x00	; 0
    177e:	61 05       	cpc	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	39 f4       	brne	.+14     	; 0x1792 <__ftoa_engine+0x28>
    1784:	32 60       	ori	r19, 0x02	; 2
    1786:	2e 5f       	subi	r18, 0xFE	; 254
    1788:	3d 93       	st	X+, r19
    178a:	30 e3       	ldi	r19, 0x30	; 48
    178c:	2a 95       	dec	r18
    178e:	e1 f7       	brne	.-8      	; 0x1788 <__ftoa_engine+0x1e>
    1790:	08 95       	ret
    1792:	9f 3f       	cpi	r25, 0xFF	; 255
    1794:	30 f0       	brcs	.+12     	; 0x17a2 <__ftoa_engine+0x38>
    1796:	80 38       	cpi	r24, 0x80	; 128
    1798:	71 05       	cpc	r23, r1
    179a:	61 05       	cpc	r22, r1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <__ftoa_engine+0x36>
    179e:	3c 5f       	subi	r19, 0xFC	; 252
    17a0:	3c 5f       	subi	r19, 0xFC	; 252
    17a2:	3d 93       	st	X+, r19
    17a4:	91 30       	cpi	r25, 0x01	; 1
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <__ftoa_engine+0x40>
    17a8:	80 68       	ori	r24, 0x80	; 128
    17aa:	91 1d       	adc	r25, r1
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	1f 93       	push	r17
    17b2:	0f 93       	push	r16
    17b4:	ff 92       	push	r15
    17b6:	ef 92       	push	r14
    17b8:	19 2f       	mov	r17, r25
    17ba:	98 7f       	andi	r25, 0xF8	; 248
    17bc:	96 95       	lsr	r25
    17be:	e9 2f       	mov	r30, r25
    17c0:	96 95       	lsr	r25
    17c2:	96 95       	lsr	r25
    17c4:	e9 0f       	add	r30, r25
    17c6:	ff 27       	eor	r31, r31
    17c8:	e2 55       	subi	r30, 0x52	; 82
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	99 27       	eor	r25, r25
    17ce:	33 27       	eor	r19, r19
    17d0:	ee 24       	eor	r14, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	a7 01       	movw	r20, r14
    17d6:	e7 01       	movw	r28, r14
    17d8:	05 90       	lpm	r0, Z+
    17da:	08 94       	sec
    17dc:	07 94       	ror	r0
    17de:	28 f4       	brcc	.+10     	; 0x17ea <__ftoa_engine+0x80>
    17e0:	36 0f       	add	r19, r22
    17e2:	e7 1e       	adc	r14, r23
    17e4:	f8 1e       	adc	r15, r24
    17e6:	49 1f       	adc	r20, r25
    17e8:	51 1d       	adc	r21, r1
    17ea:	66 0f       	add	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	06 94       	lsr	r0
    17f4:	a1 f7       	brne	.-24     	; 0x17de <__ftoa_engine+0x74>
    17f6:	05 90       	lpm	r0, Z+
    17f8:	07 94       	ror	r0
    17fa:	28 f4       	brcc	.+10     	; 0x1806 <__ftoa_engine+0x9c>
    17fc:	e7 0e       	add	r14, r23
    17fe:	f8 1e       	adc	r15, r24
    1800:	49 1f       	adc	r20, r25
    1802:	56 1f       	adc	r21, r22
    1804:	c1 1d       	adc	r28, r1
    1806:	77 0f       	add	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	66 1f       	adc	r22, r22
    180e:	06 94       	lsr	r0
    1810:	a1 f7       	brne	.-24     	; 0x17fa <__ftoa_engine+0x90>
    1812:	05 90       	lpm	r0, Z+
    1814:	07 94       	ror	r0
    1816:	28 f4       	brcc	.+10     	; 0x1822 <__ftoa_engine+0xb8>
    1818:	f8 0e       	add	r15, r24
    181a:	49 1f       	adc	r20, r25
    181c:	56 1f       	adc	r21, r22
    181e:	c7 1f       	adc	r28, r23
    1820:	d1 1d       	adc	r29, r1
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	66 1f       	adc	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	06 94       	lsr	r0
    182c:	a1 f7       	brne	.-24     	; 0x1816 <__ftoa_engine+0xac>
    182e:	05 90       	lpm	r0, Z+
    1830:	07 94       	ror	r0
    1832:	20 f4       	brcc	.+8      	; 0x183c <__ftoa_engine+0xd2>
    1834:	49 0f       	add	r20, r25
    1836:	56 1f       	adc	r21, r22
    1838:	c7 1f       	adc	r28, r23
    183a:	d8 1f       	adc	r29, r24
    183c:	99 0f       	add	r25, r25
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	88 1f       	adc	r24, r24
    1844:	06 94       	lsr	r0
    1846:	a9 f7       	brne	.-22     	; 0x1832 <__ftoa_engine+0xc8>
    1848:	84 91       	lpm	r24, Z
    184a:	10 95       	com	r17
    184c:	17 70       	andi	r17, 0x07	; 7
    184e:	41 f0       	breq	.+16     	; 0x1860 <__ftoa_engine+0xf6>
    1850:	d6 95       	lsr	r29
    1852:	c7 95       	ror	r28
    1854:	57 95       	ror	r21
    1856:	47 95       	ror	r20
    1858:	f7 94       	ror	r15
    185a:	e7 94       	ror	r14
    185c:	1a 95       	dec	r17
    185e:	c1 f7       	brne	.-16     	; 0x1850 <__ftoa_engine+0xe6>
    1860:	e4 e5       	ldi	r30, 0x54	; 84
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	68 94       	set
    1866:	15 90       	lpm	r1, Z+
    1868:	15 91       	lpm	r17, Z+
    186a:	35 91       	lpm	r19, Z+
    186c:	65 91       	lpm	r22, Z+
    186e:	95 91       	lpm	r25, Z+
    1870:	05 90       	lpm	r0, Z+
    1872:	7f e2       	ldi	r23, 0x2F	; 47
    1874:	73 95       	inc	r23
    1876:	e1 18       	sub	r14, r1
    1878:	f1 0a       	sbc	r15, r17
    187a:	43 0b       	sbc	r20, r19
    187c:	56 0b       	sbc	r21, r22
    187e:	c9 0b       	sbc	r28, r25
    1880:	d0 09       	sbc	r29, r0
    1882:	c0 f7       	brcc	.-16     	; 0x1874 <__ftoa_engine+0x10a>
    1884:	e1 0c       	add	r14, r1
    1886:	f1 1e       	adc	r15, r17
    1888:	43 1f       	adc	r20, r19
    188a:	56 1f       	adc	r21, r22
    188c:	c9 1f       	adc	r28, r25
    188e:	d0 1d       	adc	r29, r0
    1890:	7e f4       	brtc	.+30     	; 0x18b0 <__ftoa_engine+0x146>
    1892:	70 33       	cpi	r23, 0x30	; 48
    1894:	11 f4       	brne	.+4      	; 0x189a <__ftoa_engine+0x130>
    1896:	8a 95       	dec	r24
    1898:	e6 cf       	rjmp	.-52     	; 0x1866 <__ftoa_engine+0xfc>
    189a:	e8 94       	clt
    189c:	01 50       	subi	r16, 0x01	; 1
    189e:	30 f0       	brcs	.+12     	; 0x18ac <__ftoa_engine+0x142>
    18a0:	08 0f       	add	r16, r24
    18a2:	0a f4       	brpl	.+2      	; 0x18a6 <__ftoa_engine+0x13c>
    18a4:	00 27       	eor	r16, r16
    18a6:	02 17       	cp	r16, r18
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <__ftoa_engine+0x142>
    18aa:	20 2f       	mov	r18, r16
    18ac:	23 95       	inc	r18
    18ae:	02 2f       	mov	r16, r18
    18b0:	7a 33       	cpi	r23, 0x3A	; 58
    18b2:	28 f0       	brcs	.+10     	; 0x18be <__ftoa_engine+0x154>
    18b4:	79 e3       	ldi	r23, 0x39	; 57
    18b6:	7d 93       	st	X+, r23
    18b8:	2a 95       	dec	r18
    18ba:	e9 f7       	brne	.-6      	; 0x18b6 <__ftoa_engine+0x14c>
    18bc:	10 c0       	rjmp	.+32     	; 0x18de <__ftoa_engine+0x174>
    18be:	7d 93       	st	X+, r23
    18c0:	2a 95       	dec	r18
    18c2:	89 f6       	brne	.-94     	; 0x1866 <__ftoa_engine+0xfc>
    18c4:	06 94       	lsr	r0
    18c6:	97 95       	ror	r25
    18c8:	67 95       	ror	r22
    18ca:	37 95       	ror	r19
    18cc:	17 95       	ror	r17
    18ce:	17 94       	ror	r1
    18d0:	e1 18       	sub	r14, r1
    18d2:	f1 0a       	sbc	r15, r17
    18d4:	43 0b       	sbc	r20, r19
    18d6:	56 0b       	sbc	r21, r22
    18d8:	c9 0b       	sbc	r28, r25
    18da:	d0 09       	sbc	r29, r0
    18dc:	98 f0       	brcs	.+38     	; 0x1904 <__ftoa_engine+0x19a>
    18de:	23 95       	inc	r18
    18e0:	7e 91       	ld	r23, -X
    18e2:	73 95       	inc	r23
    18e4:	7a 33       	cpi	r23, 0x3A	; 58
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <__ftoa_engine+0x180>
    18e8:	70 e3       	ldi	r23, 0x30	; 48
    18ea:	7c 93       	st	X, r23
    18ec:	20 13       	cpse	r18, r16
    18ee:	b8 f7       	brcc	.-18     	; 0x18de <__ftoa_engine+0x174>
    18f0:	7e 91       	ld	r23, -X
    18f2:	70 61       	ori	r23, 0x10	; 16
    18f4:	7d 93       	st	X+, r23
    18f6:	30 f0       	brcs	.+12     	; 0x1904 <__ftoa_engine+0x19a>
    18f8:	83 95       	inc	r24
    18fa:	71 e3       	ldi	r23, 0x31	; 49
    18fc:	7d 93       	st	X+, r23
    18fe:	70 e3       	ldi	r23, 0x30	; 48
    1900:	2a 95       	dec	r18
    1902:	e1 f7       	brne	.-8      	; 0x18fc <__ftoa_engine+0x192>
    1904:	11 24       	eor	r1, r1
    1906:	ef 90       	pop	r14
    1908:	ff 90       	pop	r15
    190a:	0f 91       	pop	r16
    190c:	1f 91       	pop	r17
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	99 27       	eor	r25, r25
    1914:	87 fd       	sbrc	r24, 7
    1916:	90 95       	com	r25
    1918:	08 95       	ret

0000191a <strrev>:
    191a:	dc 01       	movw	r26, r24
    191c:	fc 01       	movw	r30, r24
    191e:	67 2f       	mov	r22, r23
    1920:	71 91       	ld	r23, Z+
    1922:	77 23       	and	r23, r23
    1924:	e1 f7       	brne	.-8      	; 0x191e <strrev+0x4>
    1926:	32 97       	sbiw	r30, 0x02	; 2
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <strrev+0x18>
    192a:	7c 91       	ld	r23, X
    192c:	6d 93       	st	X+, r22
    192e:	70 83       	st	Z, r23
    1930:	62 91       	ld	r22, -Z
    1932:	ae 17       	cp	r26, r30
    1934:	bf 07       	cpc	r27, r31
    1936:	c8 f3       	brcs	.-14     	; 0x192a <strrev+0x10>
    1938:	08 95       	ret

0000193a <__prologue_saves__>:
    193a:	2f 92       	push	r2
    193c:	3f 92       	push	r3
    193e:	4f 92       	push	r4
    1940:	5f 92       	push	r5
    1942:	6f 92       	push	r6
    1944:	7f 92       	push	r7
    1946:	8f 92       	push	r8
    1948:	9f 92       	push	r9
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	ca 1b       	sub	r28, r26
    1964:	db 0b       	sbc	r29, r27
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	09 94       	ijmp

00001972 <__epilogue_restores__>:
    1972:	2a 88       	ldd	r2, Y+18	; 0x12
    1974:	39 88       	ldd	r3, Y+17	; 0x11
    1976:	48 88       	ldd	r4, Y+16	; 0x10
    1978:	5f 84       	ldd	r5, Y+15	; 0x0f
    197a:	6e 84       	ldd	r6, Y+14	; 0x0e
    197c:	7d 84       	ldd	r7, Y+13	; 0x0d
    197e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1980:	9b 84       	ldd	r9, Y+11	; 0x0b
    1982:	aa 84       	ldd	r10, Y+10	; 0x0a
    1984:	b9 84       	ldd	r11, Y+9	; 0x09
    1986:	c8 84       	ldd	r12, Y+8	; 0x08
    1988:	df 80       	ldd	r13, Y+7	; 0x07
    198a:	ee 80       	ldd	r14, Y+6	; 0x06
    198c:	fd 80       	ldd	r15, Y+5	; 0x05
    198e:	0c 81       	ldd	r16, Y+4	; 0x04
    1990:	1b 81       	ldd	r17, Y+3	; 0x03
    1992:	aa 81       	ldd	r26, Y+2	; 0x02
    1994:	b9 81       	ldd	r27, Y+1	; 0x01
    1996:	ce 0f       	add	r28, r30
    1998:	d1 1d       	adc	r29, r1
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	ed 01       	movw	r28, r26
    19a6:	08 95       	ret

000019a8 <_exit>:
    19a8:	f8 94       	cli

000019aa <__stop_program>:
    19aa:	ff cf       	rjmp	.-2      	; 0x19aa <__stop_program>
